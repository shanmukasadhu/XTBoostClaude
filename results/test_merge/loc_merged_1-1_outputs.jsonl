{"instance_id": "astropy__astropy-12907", "found_files": ["astropy/modeling/tests/test_separable.py", "astropy/modeling/separable.py", "astropy/modeling/core.py", "astropy/modeling/mappings.py", "astropy/modeling/models.py"], "additional_artifact_loc_file": {"raw_output_files": "```\nastropy/modeling/tests/test_separable.py\nastropy/modeling/separable.py\nastropy/modeling/core.py\nastropy/modeling/mappings.py\nastropy/modeling/models.py\n```"}, "file_traj": {"response": "```\nastropy/modeling/tests/test_separable.py\nastropy/modeling/separable.py\nastropy/modeling/core.py\nastropy/modeling/mappings.py\nastropy/modeling/models.py\n```", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "You are a code reasoning model acting as a test case generator.\n\nYour task is to identify which files are most relevant to the following GitHub problem and need to be tested or modified. Prioritize files that were modified in the original test patch.\n\n---\n\n### GitHub Problem Description ###\nModeling's `separability_matrix` does not compute separability correctly for nested CompoundModels\nConsider the following model:\r\n\r\n```python\r\nfrom astropy.modeling import models as m\r\nfrom astropy.modeling.separable import separability_matrix\r\n\r\ncm = m.Linear1D(10) & m.Linear1D(5)\r\n```\r\n\r\nIt's separability matrix as you might expect is a diagonal:\r\n\r\n```python\r\n>>> separability_matrix(cm)\r\narray([[ True, False],\r\n       [False,  True]])\r\n```\r\n\r\nIf I make the model more complex:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True, False],\r\n       [False, False, False,  True]])\r\n```\r\n\r\nThe output matrix is again, as expected, the outputs and inputs to the linear models are separable and independent of each other.\r\n\r\nIf however, I nest these compound models:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & cm)\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True,  True],\r\n       [False, False,  True,  True]])\r\n```\r\nSuddenly the inputs and outputs are no longer separable?\r\n\r\nThis feels like a bug to me, but I might be missing something?\n\n\n---\n\n### Original Test Patch ###\ndiff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -28,6 +28,13 @@\n p1 = models.Polynomial1D(1, name='p1')\n \n \n+cm_4d_expected = (np.array([False, False, True, True]),\n+                  np.array([[True,  True,  False, False],\n+                            [True,  True,  False, False],\n+                            [False, False, True,  False],\n+                            [False, False, False, True]]))\n+\n+\n compound_models = {\n     'cm1': (map3 & sh1 | rot & sh1 | sh1 & sh2 & sh1,\n             (np.array([False, False, True]),\n@@ -52,7 +59,17 @@\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    'cm8': (rot & (sh1 & sh2), cm_4d_expected),\n+    'cm9': (rot & sh1 & sh2, cm_4d_expected),\n+    'cm10': ((rot & sh1) & sh2, cm_4d_expected),\n+    'cm11': (rot & sh1 & (scl1 & scl2),\n+             (np.array([False, False, True, True, True]),\n+              np.array([[True,  True,  False, False, False],\n+                        [True,  True,  False, False, False],\n+                        [False, False, True,  False, False],\n+                        [False, False, False, True,  False],\n+                        [False, False, False, False, True]]))),\n }\n \n \n\n\n---\n\n### Files modified in the original test patch ###\n['astropy/modeling/tests/test_separable.py']\n\n---\n\n### Repository Structure ###\nastropy/\n    setup.py\n    conftest.py\n    logger.py\n    version.py\n    __init__.py\n    tests/\n        test_logger.py\n        command.py\n        helper.py\n        runner.py\n        __init__.py\n        image_tests.py\n        tests/\n            test_run_tests.py\n            __init__.py\n            test_quantity_helpers.py\n            test_imports.py\n            test_runner.py\n    modeling/\n        tabular.py\n        optimizers.py\n        polynomial.py\n        parameters.py\n        spline.py\n        bounding_box.py\n        convolution.py\n        models.py\n        math_functions.py\n        core.py\n        rotations.py\n        setup_package.py\n        separable.py\n        statistic.py\n        __init__.py\n        functional_models.py\n        powerlaws.py\n        mappings.py\n        physical_models.py\n        projections.py\n        utils.py\n        fitting.py\n        tests/\n            test_models.py\n            test_models_quantities.py\n            test_quantities_evaluation.py\n            test_bounding_box.py\n            test_physical_models.py\n            test_convolution.py\n            test_input.py\n            test_core.py\n            test_compound.py\n            irafutil.py\n            test_math_func.py\n            test_parameters.py\n            test_functional_models.py\n            test_constraints.py\n            test_fitters.py\n            test_projections.py\n            __init__.py\n            test_rotations.py\n            test_utils.py\n            test_mappings.py\n            test_quantities_fitting.py\n            test_model_sets.py\n            test_separable.py\n            test_quantities_parameters.py\n            test_quantities_model.py\n            test_spline.py\n            test_quantities_rotations.py\n            example_models.py\n            test_statistics.py\n            test_polynomial.py\n            test_units_mapping.py\n            data/\n                __init__.py\n    units/\n        required_by_vounit.py\n        deprecated.py\n        quantity.py\n        cgs.py\n        photometric.py\n        si.py\n        cds.py\n        core.py\n        structured.py\n        equivalencies.py\n        astrophys.py\n        __init__.py\n        misc.py\n        decorators.py\n        _typing.py\n        physical.py\n        imperial.py\n        utils.py\n        tests/\n            test_quantity_ufuncs.py\n            test_photometric.py\n            test_aliases.py\n            test_structured.py\n            test_quantity_array_methods.py\n            test_quantity_annotations.py\n            test_units.py\n            test_quantity_typing.py\n            test_structured_erfa_ufuncs.py\n            test_quantity.py\n            __init__.py\n            test_quantity_helpers.py\n            test_utils.py\n            test_physical.py\n            test_quantity_decorator.py\n            test_format.py\n            test_equivalencies.py\n            test_logarithmic.py\n            test_quantity_non_ufuncs.py\n            test_deprecated.py\n        quantity_helper/\n            converters.py\n            __init__.py\n            function_helpers.py\n            helpers.py\n            scipy_special.py\n            erfa.py\n        format/\n            generic_parsetab.py\n            cds_parsetab.py\n            ogip_parsetab.py\n            generic.py\n            cds.py\n            console.py\n            base.py\n            unicode_format.py\n            __init__.py\n            vounit.py\n            ogip.py\n            fits.py\n            ogip_lextab.py\n            cds_lextab.py\n            utils.py\n            latex.py\n            generic_lextab.py\n        function/\n            units.py\n            core.py\n            mixin.py\n            __init__.py\n            logarithmic.py\n    time/\n        core.py\n        setup_package.py\n        __init__.py\n        formats.py\n        utils.py\n        tests/\n            test_comparisons.py\n            test_fast_parser.py\n            test_mask.py\n            test_corrs.py\n            test_pickle.py\n            test_custom_formats.py\n            test_sidereal.py\n            test_update_leap_seconds.py\n            test_ut1.py\n            test_precision.py\n            test_basic.py\n            __init__.py\n            test_delta.py\n            test_guess.py\n            test_methods.py\n            test_functions.py\n            test_quantity_interaction.py\n    uncertainty/\n        distributions.py\n        core.py\n        __init__.py\n        tests/\n            test_distribution.py\n            __init__.py\n    convolution/\n        kernels.py\n        core.py\n        setup_package.py\n        convolve.py\n        __init__.py\n        utils.py\n        tests/\n            test_convolve_speeds.py\n            test_pickle.py\n            test_convolve.py\n            test_convolve_fft.py\n            test_convolve_nddata.py\n            test_discretize.py\n            test_convolve_kernels.py\n            __init__.py\n            test_kernel_class.py\n            test_convolve_models.py\n    wcs/\n        wcs.py\n        docstrings.py\n        setup_package.py\n        __init__.py\n        wcslint.py\n        utils.py\n        tests/\n            test_wcsprm.py\n            helper.py\n            test_pickle.py\n            conftest.py\n            test_wcs.py\n            test_profiling.py\n            test_prjprm.py\n            test_wtbarr.py\n            test_celprm.py\n            test_auxprm.py\n            __init__.py\n            test_tab.py\n            test_utils.py\n            test_tabprm.py\n        wcsapi/\n            conftest.py\n            high_level_api.py\n            low_level_api.py\n            fitswcs.py\n            __init__.py\n            sliced_low_level_wcs.py\n            high_level_wcs_wrapper.py\n            utils.py\n            tests/\n                test_high_level_api.py\n                test_fitswcs.py\n                test_high_level_wcs_wrapper.py\n                __init__.py\n                test_utils.py\n                test_low_level_api.py\n            wrappers/\n                base.py\n                sliced_wcs.py\n                __init__.py\n                tests/\n                    test_sliced_wcs.py\n                    __init__.py\n    extern/\n        __init__.py\n        _strptime.py\n        ply/\n            yacc.py\n            ygen.py\n            __init__.py\n            cpp.py\n            ctokens.py\n            lex.py\n        configobj/\n            configobj.py\n            __init__.py\n            validate.py\n        jquery/\n            __init__.py\n    utils/\n        parsing.py\n        metadata.py\n        collections.py\n        argparse.py\n        console.py\n        data.py\n        introspection.py\n        setup_package.py\n        codegen.py\n        state.py\n        __init__.py\n        diff.py\n        misc.py\n        decorators.py\n        shapes.py\n        exceptions.py\n        data_info.py\n        tests/\n            test_decorators.py\n            test_progress_bar_func.py\n            test_parsing.py\n            test_console.py\n            test_xml.py\n            test_state.py\n            test_metadata.py\n            __init__.py\n            test_collections.py\n            test_misc.py\n            test_diff.py\n            test_introspection.py\n            test_shapes.py\n            test_data_info.py\n            test_codegen.py\n            test_data.py\n            data/\n                test_package/\n                    __init__.py\n        xml/\n            unescaper.py\n            iterparser.py\n            setup_package.py\n            __init__.py\n            check.py\n            validate.py\n            writer.py\n            tests/\n                __init__.py\n                test_iterparse.py\n        masked/\n            core.py\n            __init__.py\n            function_helpers.py\n            tests/\n                test_function_helpers.py\n                test_containers.py\n                test_table.py\n                test_masked.py\n                __init__.py\n                test_functions.py\n        iers/\n            __init__.py\n            iers.py\n            tests/\n                __init__.py\n                test_iers.py\n                test_leap_second.py\n        compat/\n            optional_deps.py\n            __init__.py\n            misc.py\n            numpycompat.py\n    constants/\n        config.py\n        iau2015.py\n        cgs.py\n        astropyconst40.py\n        codata2018.py\n        codata2014.py\n        astropyconst13.py\n        si.py\n        codata2010.py\n        constant.py\n        __init__.py\n        astropyconst20.py\n        iau2012.py\n        utils.py\n        tests/\n            test_sciencestate.py\n            test_pickle.py\n            test_constant.py\n            test_prior_version.py\n            __init__.py\n    _dev/\n        __init__.py\n        scm_version.py\n    visualization/\n        hist.py\n        units.py\n        transform.py\n        mpl_style.py\n        stretch.py\n        time.py\n        __init__.py\n        lupton_rgb.py\n        interval.py\n        mpl_normalize.py\n        tests/\n            test_lupton_rgb.py\n            test_histogram.py\n            test_norm.py\n            test_units.py\n            test_stretch.py\n            __init__.py\n            test_time.py\n            test_interval.py\n        wcsaxes/\n            coordinate_range.py\n            frame.py\n            wcsapi.py\n            axislabels.py\n            grid_paths.py\n            coordinate_helpers.py\n            core.py\n            ticks.py\n            patches.py\n            transforms.py\n            __init__.py\n            formatter_locator.py\n            ticklabels.py\n            coordinates_map.py\n            utils.py\n            tests/\n                test_wcsapi.py\n                test_images.py\n                test_transforms.py\n                test_coordinate_helpers.py\n                __init__.py\n                test_formatter_locator.py\n                test_utils.py\n                test_display_world_coordinates.py\n                test_transform_coord_meta.py\n                test_frame.py\n                test_grid_paths.py\n                test_misc.py\n        scripts/\n            fits2bitmap.py\n            __init__.py\n            tests/\n                test_fits2bitmap.py\n                __init__.py\n    config/\n        affiliated.py\n        paths.py\n        configuration.py\n        __init__.py\n        tests/\n            __init__.py\n            test_configs.py\n    table/\n        sorted_array.py\n        pandas.py\n        operations.py\n        info.py\n        connect.py\n        pprint.py\n        jsviewer.py\n        index.py\n        setup_package.py\n        table_helpers.py\n        np_utils.py\n        bst.py\n        column.py\n        __init__.py\n        meta.py\n        groups.py\n        row.py\n        serialize.py\n        ndarray_mixin.py\n        soco.py\n        table.py\n        tests/\n            test_item_access.py\n            test_info.py\n            test_bst.py\n            test_subclass.py\n            test_showtable.py\n            test_row.py\n            test_pickle.py\n            conftest.py\n            test_operations.py\n            test_init_table.py\n            test_index.py\n            test_table.py\n            test_masked.py\n            test_np_utils.py\n            test_array.py\n            test_groups.py\n            __init__.py\n            test_mixin.py\n            test_column.py\n            test_jsviewer.py\n            test_pprint.py\n        mixins/\n            registry.py\n            __init__.py\n            dask.py\n            tests/\n                test_dask.py\n                test_registry.py\n                __init__.py\n        scripts/\n            showtable.py\n            __init__.py\n    nddata/\n        nddata_withmixins.py\n        blocks.py\n        compat.py\n        nddata.py\n        bitmask.py\n        nddata_base.py\n        __init__.py\n        decorators.py\n        flag_collection.py\n        ccddata.py\n        nduncertainty.py\n        _testing.py\n        utils.py\n        tests/\n            test_decorators.py\n            test_bitmask.py\n            test_nddata.py\n            test_nduncertainty.py\n            __init__.py\n            test_flag_collection.py\n            test_blocks.py\n            test_utils.py\n            test_ccddata.py\n            test_compat.py\n            test_nddata_base.py\n        mixins/\n            ndslicing.py\n            __init__.py\n            ndio.py\n            ndarithmetic.py\n            tests/\n                __init__.py\n                test_ndarithmetic.py\n                test_ndslicing.py\n                test_ndio.py\n    timeseries/\n        downsample.py\n        binned.py\n        core.py\n        __init__.py\n        sampled.py\n        tests/\n            test_sampled.py\n            test_common.py\n            __init__.py\n            test_binned.py\n            test_downsample.py\n        io/\n            kepler.py\n            __init__.py\n            tests/\n                __init__.py\n                test_kepler.py\n        periodograms/\n            base.py\n            __init__.py\n            lombscargle/\n                core.py\n                __init__.py\n                utils.py\n                _statistics.py\n                tests/\n                    __init__.py\n                    test_utils.py\n                    test_lombscargle.py\n                    test_statistics.py\n                implementations/\n                    main.py\n                    scipy_impl.py\n                    fastchi2_impl.py\n                    __init__.py\n                    chi2_impl.py\n                    mle.py\n                    utils.py\n                    slow_impl.py\n                    fast_impl.py\n                    tests/\n                        test_mle.py\n                        __init__.py\n                        test_utils.py\n            bls/\n                core.py\n                setup_package.py\n                __init__.py\n                methods.py\n                tests/\n                    __init__.py\n                    test_bls.py\n    samp/\n        lockfile_helpers.py\n        web_profile.py\n        errors.py\n        client.py\n        constants.py\n        setup_package.py\n        hub.py\n        hub_script.py\n        __init__.py\n        standard_profile.py\n        integrated_client.py\n        hub_proxy.py\n        utils.py\n        tests/\n            test_standard_profile.py\n            test_web_profile.py\n            test_hub_script.py\n            web_profile_test_helpers.py\n            test_hub.py\n            test_helpers.py\n            test_errors.py\n            __init__.py\n            test_client.py\n            test_hub_proxy.py\n    io/\n        __init__.py\n        tests/\n            safeio.py\n            mixin_columns.py\n            __init__.py\n        misc/\n            connect.py\n            yaml.py\n            parquet.py\n            __init__.py\n            pickle_helpers.py\n            hdf5.py\n            tests/\n                test_pandas.py\n                test_pickle_helpers.py\n                test_hdf5.py\n                __init__.py\n                test_parquet.py\n                test_yaml.py\n            pandas/\n                connect.py\n                __init__.py\n            asdf/\n                extension.py\n                connect.py\n                types.py\n                __init__.py\n                tests/\n                    __init__.py\n                    test_io.py\n                tags/\n                    __init__.py\n                    helpers.py\n                    tests/\n                        __init__.py\n                        helpers.py\n                    time/\n                        timedelta.py\n                        time.py\n                        __init__.py\n                        tests/\n                            test_timedelta.py\n                            __init__.py\n                            test_time.py\n                    fits/\n                        __init__.py\n                        fits.py\n                        tests/\n                            test_fits.py\n                            __init__.py\n                    transform/\n                        tabular.py\n                        polynomial.py\n                        basic.py\n                        compound.py\n                        spline.py\n                        math.py\n                        __init__.py\n                        functional_models.py\n                        powerlaws.py\n                        physical_models.py\n                        projections.py\n                        tests/\n                            test_transform.py\n                            __init__.py\n                            test_units_mapping.py\n                    unit/\n                        equivalency.py\n                        quantity.py\n                        __init__.py\n                        unit.py\n                        tests/\n                            test_equivalency.py\n                            test_quantity.py\n                            __init__.py\n                            test_unit.py\n                    table/\n                        __init__.py\n                        table.py\n                        tests/\n                            test_table.py\n                            __init__.py\n                    coordinates/\n                        earthlocation.py\n                        spectralcoord.py\n                        frames.py\n                        skycoord.py\n                        angle.py\n                        __init__.py\n                        representation.py\n                        tests/\n                            test_angle.py\n                            test_representation.py\n                            test_frames.py\n                            test_earthlocation.py\n                            __init__.py\n                            test_spectralcoord.py\n                            test_skycoord.py\n        registry/\n            core.py\n            base.py\n            compat.py\n            __init__.py\n            interface.py\n            tests/\n                test_registry_help.py\n                test_registries.py\n                __init__.py\n        votable/\n            converters.py\n            util.py\n            connect.py\n            setup_package.py\n            xmlutil.py\n            __init__.py\n            ucd.py\n            volint.py\n            exceptions.py\n            tree.py\n            table.py\n            tests/\n                vo_test.py\n                exception_test.py\n                resource_test.py\n                ucd_test.py\n                __init__.py\n                util_test.py\n                table_test.py\n                converter_test.py\n                tree_test.py\n            validator/\n                main.py\n                result.py\n                html.py\n                __init__.py\n        fits/\n            card.py\n            util.py\n            connect.py\n            file.py\n            fitsrec.py\n            setup_package.py\n            column.py\n            __init__.py\n            diff.py\n            header.py\n            convenience.py\n            fitstime.py\n            verify.py\n            tests/\n                test_uint.py\n                test_hdulist.py\n                test_core.py\n                test_structured.py\n                test_division.py\n                test_fitsinfo.py\n                test_checksum.py\n                test_connect.py\n                test_table.py\n                test_fitsdiff.py\n                test_convenience.py\n                test_fitscheck.py\n                test_groups.py\n                __init__.py\n                test_util.py\n                test_compression_failures.py\n                test_nonstandard.py\n                test_fitstime.py\n                test_image_dask.py\n                test_header.py\n                test_fitsheader.py\n                test_diff.py\n                test_image.py\n            hdu/\n                nonstandard.py\n                compressed.py\n                streaming.py\n                base.py\n                __init__.py\n                image.py\n                groups.py\n                table.py\n                hdulist.py\n            scripts/\n                fitsheader.py\n                fitscheck.py\n                __init__.py\n                fitsinfo.py\n                fitsdiff.py\n        ascii/\n            fixedwidth.py\n            qdp.py\n            basic.py\n            connect.py\n            daophot.py\n            ipac.py\n            html.py\n            cds.py\n            core.py\n            ecsv.py\n            sextractor.py\n            setup_package.py\n            docs.py\n            __init__.py\n            misc.py\n            mrt.py\n            fastbasic.py\n            rst.py\n            ui.py\n            latex.py\n            tests/\n                test_fixedwidth.py\n                test_html.py\n                test_read.py\n                test_write.py\n                test_cds.py\n                common.py\n                test_connect.py\n                test_cds_header_from_readme.py\n                test_compressed.py\n                test_qdp.py\n                test_rst.py\n                test_ecsv.py\n                test_c_reader.py\n                __init__.py\n                test_ipac_definitions.py\n                test_types.py\n    _erfa/\n        __init__.py\n    coordinates/\n        angle_utilities.py\n        funcs.py\n        spectral_coordinate.py\n        attributes.py\n        angle_formats.py\n        name_resolve.py\n        distances.py\n        spectral_quantity.py\n        earth_orientation.py\n        sites.py\n        matrix_utilities.py\n        matching.py\n        errors.py\n        orbital_elements.py\n        angle_parsetab.py\n        calculation.py\n        sky_coordinate.py\n        erfa_astrom.py\n        transformations.py\n        angle_lextab.py\n        solar_system.py\n        __init__.py\n        angles.py\n        earth.py\n        jparser.py\n        baseframe.py\n        representation.py\n        sky_coordinate_parsers.py\n        tests/\n            test_spectral_coordinate.py\n            test_angles.py\n            test_solar_system.py\n            test_shape_manipulation.py\n            test_iau_fullstack.py\n            test_unit_representation.py\n            test_api_ape5.py\n            test_representation.py\n            test_spectral_quantity.py\n            test_celestial_transformations.py\n            test_regression.py\n            test_intermediate_transformations.py\n            test_sky_coord_velocities.py\n            test_pickle.py\n            test_formatting.py\n            test_angle_generators.py\n            test_velocity_corrs.py\n            test_distance.py\n            test_sites.py\n            test_frames_with_velocity.py\n            test_arrays.py\n            test_angular_separation.py\n            test_frames.py\n            test_representation_methods.py\n            test_matrix_utilities.py\n            test_geodetic_representations.py\n            test_earth.py\n            __init__.py\n            test_icrs_observed_transformations.py\n            test_atc_replacements.py\n            test_sky_coord.py\n            test_utils.py\n            test_funcs.py\n            test_skyoffset_transformations.py\n            test_name_resolve.py\n            test_representation_arithmetic.py\n            test_matching.py\n            test_finite_difference_velocities.py\n            test_transformations.py\n            test_erfa_astrom.py\n            accuracy/\n                generate_spectralcoord_ref.py\n                test_ecliptic.py\n                test_altaz_icrs.py\n                test_fk4_no_e_fk5.py\n                test_fk4_no_e_fk4.py\n                test_icrs_fk5.py\n                generate_ref_ast.py\n                __init__.py\n                test_galactic_fk4.py\n        builtin_frames/\n            fk4_fk5_transforms.py\n            baseradec.py\n            cirs_observed_transforms.py\n            lsr.py\n            fk5.py\n            supergalactic.py\n            equatorial.py\n            icrs_fk5_transforms.py\n            itrs.py\n            fk4.py\n            galactic.py\n            galactocentric.py\n            cirs.py\n            altaz.py\n            ecliptic.py\n            icrs_cirs_transforms.py\n            hcrs.py\n            __init__.py\n            intermediate_rotation_transforms.py\n            ecliptic_transforms.py\n            gcrs.py\n            icrs.py\n            hadec.py\n            skyoffset.py\n            supergalactic_transforms.py\n            galactic_transforms.py\n            utils.py\n            icrs_observed_transforms.py\n    stats/\n        funcs.py\n        info_theory.py\n        sigma_clipping.py\n        circstats.py\n        bayesian_blocks.py\n        jackknife.py\n        spatial.py\n        setup_package.py\n        __init__.py\n        histogram.py\n        biweight.py\n        tests/\n            test_histogram.py\n            test_biweight.py\n            test_circstats.py\n            test_jackknife.py\n            test_sigma_clipping.py\n            test_bayesian_blocks.py\n            __init__.py\n            test_spatial.py\n            test_funcs.py\n            test_info_theory.py\n        lombscargle/\n            __init__.py\n        bls/\n            __init__.py\n    cosmology/\n        funcs.py\n        realizations.py\n        flrw.py\n        units.py\n        parameter.py\n        connect.py\n        parameters.py\n        core.py\n        __init__.py\n        utils.py\n        tests/\n            test_core.py\n            test_cosmology.py\n            conftest.py\n            test_parameter.py\n            test_connect.py\n            test_parameters.py\n            test_units.py\n            __init__.py\n            test_realizations.py\n            test_utils.py\n            test_funcs.py\n            test_flrw.py\n            mypackage/\n                cosmology.py\n                __init__.py\n                io/\n                    astropy_io.py\n                    astropy_convert.py\n                    core.py\n                    __init__.py\n                    tests/\n                        test_astropy_convert.py\n                        test_astropy_io.py\n                        conftest.py\n                        __init__.py\n        io/\n            cosmology.py\n            yaml.py\n            mapping.py\n            ecsv.py\n            __init__.py\n            model.py\n            row.py\n            utils.py\n            table.py\n            tests/\n                test_model.py\n                test_cosmology.py\n                test_row.py\n                base.py\n                test_table.py\n                test_ecsv.py\n                __init__.py\n                test_json.py\n                test_mapping.py\n                test_yaml.py\nexamples/\n    template/\n        example-template.py\n    io/\n        split-jpeg-to-fits.py\n        create-mef.py\n        plot_fits-image.py\n        fits-tables.py\n        skip_create-large-fits.py\n        modify-fits-header.py\n    coordinates/\n        plot_sgr-coordinate-frame.py\n        plot_obs-planning.py\n        rv-to-gsr.py\n        plot_galactocentric-frame.py\ndocs/\n    conftest.py\n    conf.py\n    wcs/\n        examples/\n            programmatic.py\n            cube_wcs.py\n            from_file.py\n    nddata/\n        examples/\n            cutout2d_tofits.py\n.pyinstaller\n    run_astropy_tests.py\n    hooks/\n        hook-skyfield.py\n\n---\n\n### Instructions ###\nReturn a list of at most 5 full file paths ordered by relevance (most important first). Always include files from the original test patch at the top of the list if relevant.\n\n**Format your response like this, and do not include any explanation:**\nfile1.py\nfile2.py\n\nOnly include file paths. Wrap the entire list in triple backticks."}, "found_related_locs": [[""], ["function: is_separable\nfunction: separability_matrix\nfunction: _compute_n_outputs\nfunction: _arith_oper\nfunction: _coord_matrix\nfunction: _cstack\nfunction: _cdot\nfunction: _separable\nvariable: _operators"], ["class: Model\nfunction: Model._calculate_separability_matrix\nclass: CompoundModel"]], "additional_artifact_loc_related": [{"raw_output_loc": "```\nastropy/modeling/separable.py\nfunction: is_separable\nfunction: separability_matrix\nfunction: _compute_n_outputs\nfunction: _arith_oper\nfunction: _coord_matrix\nfunction: _cstack\nfunction: _cdot\nfunction: _separable\nvariable: _operators\n\nastropy/modeling/core.py\nclass: Model\nfunction: Model._calculate_separability_matrix\nclass: CompoundModel\n```"}], "related_loc_traj": {"response": "```\nastropy/modeling/separable.py\nfunction: is_separable\nfunction: separability_matrix\nfunction: _compute_n_outputs\nfunction: _arith_oper\nfunction: _coord_matrix\nfunction: _cstack\nfunction: _cdot\nfunction: _separable\nvariable: _operators\n\nastropy/modeling/core.py\nclass: Model\nfunction: Model._calculate_separability_matrix\nclass: CompoundModel\n```", "usage": {"completion_tokens": 0, "prompt_tokens": 0}, "prompt": "\nYou are a code reasoning model acting as a test case generator.\n\nGiven a compressed skeleton of code files, identify all **global variables**, **function names**, or **class names** that are relevant to solving the problem.\n\n---\n\n### GitHub Problem Description ###\nModeling's `separability_matrix` does not compute separability correctly for nested CompoundModels\nConsider the following model:\r\n\r\n```python\r\nfrom astropy.modeling import models as m\r\nfrom astropy.modeling.separable import separability_matrix\r\n\r\ncm = m.Linear1D(10) & m.Linear1D(5)\r\n```\r\n\r\nIt's separability matrix as you might expect is a diagonal:\r\n\r\n```python\r\n>>> separability_matrix(cm)\r\narray([[ True, False],\r\n       [False,  True]])\r\n```\r\n\r\nIf I make the model more complex:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True, False],\r\n       [False, False, False,  True]])\r\n```\r\n\r\nThe output matrix is again, as expected, the outputs and inputs to the linear models are separable and independent of each other.\r\n\r\nIf however, I nest these compound models:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & cm)\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True,  True],\r\n       [False, False,  True,  True]])\r\n```\r\nSuddenly the inputs and outputs are no longer separable?\r\n\r\nThis feels like a bug to me, but I might be missing something?\n\n\n---\n\n### Original Test Patch ###\ndiff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -28,6 +28,13 @@\n p1 = models.Polynomial1D(1, name='p1')\n \n \n+cm_4d_expected = (np.array([False, False, True, True]),\n+                  np.array([[True,  True,  False, False],\n+                            [True,  True,  False, False],\n+                            [False, False, True,  False],\n+                            [False, False, False, True]]))\n+\n+\n compound_models = {\n     'cm1': (map3 & sh1 | rot & sh1 | sh1 & sh2 & sh1,\n             (np.array([False, False, True]),\n@@ -52,7 +59,17 @@\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    'cm8': (rot & (sh1 & sh2), cm_4d_expected),\n+    'cm9': (rot & sh1 & sh2, cm_4d_expected),\n+    'cm10': ((rot & sh1) & sh2, cm_4d_expected),\n+    'cm11': (rot & sh1 & (scl1 & scl2),\n+             (np.array([False, False, True, True, True]),\n+              np.array([[True,  True,  False, False, False],\n+                        [True,  True,  False, False, False],\n+                        [False, False, True,  False, False],\n+                        [False, False, False, True,  False],\n+                        [False, False, False, False, True]]))),\n }\n \n \n\n\n---\n\n### Skeleton of Relevant Files ###\n\n### File: astropy/modeling/tests/test_separable.py ###\n```python\n# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\nsh1 = models.Shift(1, name='shift1')\nsh2 = models.Shift(2, name='sh2')\nscl1 = models.Scale(1, name='scl1')\nscl2 = models.Scale(2, name='scl2')\nmap1 = Mapping((0, 1, 0, 1), name='map1')\nmap2 = Mapping((0, 0, 1), name='map2')\nmap3 = Mapping((0, 0), name='map3')\nrot = models.Rotation2D(2, name='rotation')\np2 = models.Polynomial2D(1, name='p2')\np22 = models.Polynomial2D(2, name='p22')\np1 = models.Polynomial1D(1, name='p1')\n\n\ncompound_models = {\n    'cm1': (map3 & sh1 | rot & sh1 | sh1 & sh2 & sh1,\n            (np.array([False, False, True]),\n             np.array([[True, False], [True, False], [False, True]]))\n            ),\n    'cm2': (sh1 & sh2 | rot | map1 | p2 & p22,\n            (np.array([False, False]),\n             np.array([[True, True], [True, True]]))\n            ),\n    'cm3': (map2 | rot & scl1,\n            (np.array([False, False, True]),\n             np.array([[True, False], [True, False], [False, True]]))\n            ),\n    'cm4': (sh1 & sh2 | map2 | rot & scl1,\n            (np.array([False, False, True]),\n             np.array([[True, False], [True, False], [False, True]]))\n            ),\n    'cm5': (map3 | sh1 & sh2 | scl1 & scl2,\n            (np.array([False, False]),\n             np.array([[True], [True]]))\n            ),\n    'cm7': (map2 | p2 & sh1,\n            (np.array([False, True]),\n             np.array([[True, False], [False, True]]))\n            )\n}\n\n\ndef test_coord_matrix():\n...\n\ndef test_cdot():\n...\n\ndef test_cstack():\n...\n\ndef test_arith_oper():\n...\n\n@pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\ndef test_separable(compound_model, result):\n...\n\ndef test_custom_model_separable():\n\n```\n\n### File: astropy/modeling/separable.py ###\n```python\n# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\n\n__all__ = [\"is_separable\", \"separability_matrix\"]\n\n\ndef is_separable(transform):\n...\n\ndef separability_matrix(transform):\n...\n\ndef _compute_n_outputs(left, right):\n...\n\ndef _arith_oper(left, right):\n...\n\ndef _coord_matrix(model, pos, noutp):\n...\n\ndef _cstack(left, right):\n...\n\ndef _cdot(left, right):\n...\n\ndef _separable(transform):\n...\n\n# Maps modeling operators to a function computing and represents the\n# relationship of axes as an array of 0-es and 1-s\n_operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n```\n\n### File: astropy/modeling/core.py ###\n```python\n# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\n\n__all__ = ['Model', 'FittableModel', 'Fittable1DModel', 'Fittable2DModel',\n           'CompoundModel', 'fix_inputs', 'custom_model', 'ModelDefinitionError',\n           'bind_bounding_box', 'bind_compound_bounding_box']\n\n\ndef _model_oper(oper, **kwargs):\n...\n\nclass ModelDefinitionError(TypeError):\n    pass\n\n\nclass _ModelMeta(abc.ABCMeta):\n\n    _is_dynamic = False\n\n    # Default empty dict for _parameters_, which will be empty on model\n    # classes that don't have any Parameters\n\n    def __new__(mcls, name, bases, members, **kwds):\n...\n    def __init__(cls, name, bases, members, **kwds):\n...\n    def __repr__(cls):\n...\n    def _repr_pretty_(cls, p, cycle):\n...\n    def __reduce__(cls):\n...\n    @property\n    def name(cls):\n...\n    @property\n    def _is_concrete(cls):\n...\n    def rename(cls, name=None, inputs=None, outputs=None):\n...\n    def _create_inverse_property(cls, members):\n...\n    def _create_bounding_box_property(cls, members):\n...\n    def _create_bounding_box_subclass(cls, func, sig):\n...\n    def _handle_special_methods(cls, members, pdict):\n...\n    # *** Arithmetic operators for creating compound models ***\n    __add__ = _model_oper('+')\n    __sub__ = _model_oper('-')\n    __mul__ = _model_oper('*')\n    __truediv__ = _model_oper('/')\n    __pow__ = _model_oper('**')\n    __or__ = _model_oper('|')\n    __and__ = _model_oper('&')\n    _fix_inputs = _model_oper('fix_inputs')\n\n    # *** Other utilities ***\n\n    def _format_cls_repr(cls, keywords=[]):\n...\n\nclass Model(metaclass=_ModelMeta):\n\n    parameter_constraints = Parameter.constraints\n\n    model_constraints = ('eqcons', 'ineqcons')\n\n    param_names = ()\n\n    n_inputs = 0\n    n_outputs = 0\n\n    standard_broadcasting = True\n    fittable = False\n    linear = True\n    _separable = None\n    meta = metadata.MetaData()\n\n    # By default models either use their own inverse property or have no\n    # inverse at all, but users may also assign a custom inverse to a model,\n    # optionally; in that case it is of course up to the user to determine\n    # whether their inverse is *actually* an inverse to the model they assign\n    # it to.\n    _inverse = None\n    _user_inverse = None\n\n    _bounding_box = None\n    _user_bounding_box = None\n\n    _has_inverse_bounding_box = False\n\n    # Default n_models attribute, so that __len__ is still defined even when a\n    # model hasn't completed initialization yet\n    _n_models = 1\n\n    # New classes can set this as a boolean value.\n    # It is converted to a dictionary mapping input name to a boolean value.\n    _input_units_strict = False\n\n    # Allow dimensionless input (and corresponding output). If this is True,\n    # input values to evaluate will gain the units specified in input_units. If\n    # this is a dictionary then it should map input name to a bool to allow\n    # dimensionless numbers for that input.\n    # Only has an effect if input_units is defined.\n    _input_units_allow_dimensionless = False\n\n    # Default equivalencies to apply to input values. If set, this should be a\n    # dictionary where each key is a string that corresponds to one of the\n    # model inputs. Only has an effect if input_units is defined.\n    input_units_equivalencies = None\n\n    # Covariance matrix can be set by fitter if available.\n    # If cov_matrix is available, then std will set as well\n    _cov_matrix = None\n    _stds = None\n\n    def __init_subclass__(cls, **kwargs):\n...\n    def __init__(self, *args, meta=None, name=None, **kwargs):\n...\n    def _default_inputs_outputs(self):\n...\n    def _initialize_setters(self, kwargs):\n...\n    @property\n    def inputs(self):\n...\n    @inputs.setter\n    def inputs(self, val):\n...\n    @property\n    def outputs(self):\n...\n    @outputs.setter\n    def outputs(self, val):\n...\n    @property\n    def n_inputs(self):\n...\n    @property\n    def n_outputs(self):\n...\n    def _calculate_separability_matrix(self):\n...\n    def _initialize_unit_support(self):\n...\n    @property\n    def input_units_strict(self):\n...\n    @property\n    def input_units_allow_dimensionless(self):\n...\n    @property\n    def uses_quantity(self):\n...\n    def __repr__(self):\n...\n    def __str__(self):\n...\n    def __len__(self):\n...\n    @staticmethod\n    def _strip_ones(intup):\n...\n    def __setattr__(self, attr, value):\n...\n    def _pre_evaluate(self, *args, **kwargs):\n...\n    def get_bounding_box(self, with_bbox=True):\n...\n    @property\n    def _argnames(self):\n...\n    def _validate_input_shape(self, _input, idx, argnames, model_set_axis, check_model_set_axis):\n...\n    def _validate_input_shapes(self, inputs, argnames, model_set_axis):\n...\n    def input_shape(self, inputs):\n...\n    def _generic_evaluate(self, evaluate, _inputs, fill_value, with_bbox):\n...\n    def _post_evaluate(self, inputs, outputs, broadcasted_shapes, with_bbox, **kwargs):\n...\n    @property\n    def bbox_with_units(self):\n...\n    def __call__(self, *args, **kwargs):\n...\n    def _get_renamed_inputs_as_positional(self, *args, **kwargs):\n...\n    # *** Properties ***\n    @property\n    def name(self):\n...\n    @name.setter\n    def name(self, val):\n...\n    @property\n    def model_set_axis(self):\n...\n    @property\n    def param_sets(self):\n...\n    @property\n    def parameters(self):\n...\n    @parameters.setter\n    def parameters(self, value):\n...\n    @property\n    def sync_constraints(self):\n...\n    @sync_constraints.setter\n    def sync_constraints(self, value):\n...\n    @property\n    def fixed(self):\n...\n    @property\n    def bounds(self):\n...\n    @property\n    def tied(self):\n...\n    @property\n    def eqcons(self):\n...\n    @property\n    def ineqcons(self):\n...\n    def has_inverse(self):\n...\n    @property\n    def inverse(self):\n...\n    @inverse.setter\n    def inverse(self, value):\n...\n    @inverse.deleter\n    def inverse(self):\n...\n    @property\n    def has_user_inverse(self):\n...\n    @property\n    def bounding_box(self):\n...\n    @bounding_box.setter\n    def bounding_box(self, bounding_box):\n...\n    def set_slice_args(self, *args):\n...\n    @bounding_box.deleter\n    def bounding_box(self):\n...\n    @property\n    def has_user_bounding_box(self):\n...\n    @property\n    def cov_matrix(self):\n...\n    @cov_matrix.setter\n    def cov_matrix(self, cov):\n...\n    @property\n    def stds(self):\n...\n    @stds.setter\n    def stds(self, stds):\n...\n    @property\n    def separable(self):\n...\n    # *** Public methods ***\n\n    def without_units_for_data(self, **kwargs):\n...\n    def output_units(self, **kwargs):\n...\n    def strip_units_from_tree(self):\n...\n    def with_units_from_data(self, **kwargs):\n...\n    @property\n    def _has_units(self):\n...\n    @property\n    def _supports_unit_fitting(self):\n...\n    @abc.abstractmethod\n    def evaluate(self, *args, **kwargs):\n...\n    def sum_of_implicit_terms(self, *args, **kwargs):\n...\n    def render(self, out=None, coords=None):\n...\n    @property\n    def input_units(self):\n...\n    @property\n    def return_units(self):\n...\n    def _prepare_inputs_single_model(self, params, inputs, **kwargs):\n...\n    @staticmethod\n    def _remove_axes_from_shape(shape, axis):\n...\n    def _prepare_inputs_model_set(self, params, inputs, model_set_axis_input,\n                                  **kwargs):\n...\n    def prepare_inputs(self, *inputs, model_set_axis=None, equivalencies=None,\n                       **kwargs):\n...\n    def _validate_input_units(self, inputs, equivalencies=None, inputs_map=None):\n...\n    def _process_output_units(self, inputs, outputs):\n...\n    @staticmethod\n    def _prepare_output_single_model(output, broadcast_shape):\n...\n    def _prepare_outputs_single_model(self, outputs, broadcasted_shapes):\n...\n    def _prepare_outputs_model_set(self, outputs, broadcasted_shapes, model_set_axis):\n...\n    def prepare_outputs(self, broadcasted_shapes, *outputs, **kwargs):\n...\n    def copy(self):\n...\n    def deepcopy(self):\n...\n    @sharedmethod\n    def rename(self, name):\n...\n    def coerce_units(\n        self,\n        input_units=None,\n        return_units=None,\n        input_units_equivalencies=None,\n        input_units_allow_dimensionless=False\n    ):\n...\n    @property\n    def n_submodels(self):\n...\n    def _initialize_constraints(self, kwargs):\n...\n    def _initialize_parameters(self, args, kwargs):\n...\n    def _initialize_parameter_value(self, param_name, value):\n...\n    def _initialize_slices(self):\n...\n    def _parameters_to_array(self):\n...\n    def _array_to_parameters(self):\n...\n    def _check_param_broadcast(self, max_ndim):\n...\n    def _param_sets(self, raw=False, units=False):\n...\n    def _format_repr(self, args=[], kwargs={}, defaults={}):\n...\n    def _format_str(self, keywords=[], defaults={}):\n...\n\nclass FittableModel(Model):\n\n    linear = False\n    # derivative with respect to parameters\n    fit_deriv = None\n    # Flag that indicates if the model derivatives with respect to parameters\n    # are given in columns or rows\n    col_fit_deriv = True\n    fittable = True\n\n\nclass Fittable1DModel(FittableModel):\n    n_inputs = 1\n    n_outputs = 1\n    _separable = True\n\n\nclass Fittable2DModel(FittableModel):\n\n    n_inputs = 2\n    n_outputs = 1\n\n\ndef _make_arithmetic_operator(oper):\n...\n\ndef _composition_operator(f, g):\n...\n\ndef _join_operator(f, g):\n...\n\nBINARY_OPERATORS = {\n    '+': _make_arithmetic_operator(operator.add),\n    '-': _make_arithmetic_operator(operator.sub),\n    '*': _make_arithmetic_operator(operator.mul),\n    '/': _make_arithmetic_operator(operator.truediv),\n    '**': _make_arithmetic_operator(operator.pow),\n    '|': _composition_operator,\n    '&': _join_operator\n}\n\nSPECIAL_OPERATORS = _SpecialOperatorsDict()\n\n\ndef _add_special_operator(sop_name, sop):\n...\n\nclass CompoundModel(Model):\n\n    def __init__(self, op, left, right, name=None):\n...\n    def _get_left_inputs_from_args(self, args):\n...\n    def _get_right_inputs_from_args(self, args):\n...\n    def _get_left_params_from_args(self, args):\n...\n    def _get_right_params_from_args(self, args):\n...\n    def _get_kwarg_model_parameters_as_positional(self, args, kwargs):\n...\n    def _apply_operators_to_value_lists(self, leftval, rightval, **kw):\n...\n    def evaluate(self, *args, **kw):\n...\n    @property\n    def n_submodels(self):\n...\n    @property\n    def submodel_names(self):\n...\n    def both_inverses_exist(self):\n...\n    def _pre_evaluate(self, *args, **kwargs):\n...\n    @property\n    def _argnames(self):\n...\n    def _post_evaluate(self, inputs, outputs, broadcasted_shapes, with_bbox, **kwargs):\n...\n    def _evaluate(self, *args, **kw):\n...\n    @property\n    def param_names(self):\n...\n    def _make_leaflist(self):\n...\n    def __getattr__(self, name):\n...\n    def __getitem__(self, index):\n...\n    def _str_index_to_int(self, str_index):\n...\n    @property\n    def n_inputs(self):\n...\n    @n_inputs.setter\n    def n_inputs(self, value):\n...\n    @property\n    def n_outputs(self):\n...\n    @n_outputs.setter\n    def n_outputs(self, value):\n...\n    @property\n    def eqcons(self):\n...\n    @eqcons.setter\n    def eqcons(self, value):\n...\n    @property\n    def ineqcons(self):\n...\n    @ineqcons.setter\n    def ineqcons(self, value):\n...\n    def traverse_postorder(self, include_operator=False):\n...\n    def _format_expression(self, format_leaf=None):\n...\n    def _format_components(self):\n...\n    def __str__(self):\n...\n    def rename(self, name):\n...\n    @property\n    def isleaf(self):\n...\n    @property\n    def inverse(self):\n...\n    @property\n    def fittable(self):\n...\n    __add__ = _model_oper('+')\n    __sub__ = _model_oper('-')\n    __mul__ = _model_oper('*')\n    __truediv__ = _model_oper('/')\n    __pow__ = _model_oper('**')\n    __or__ = _model_oper('|')\n    __and__ = _model_oper('&')\n\n    def _map_parameters(self):\n...\n    def _initialize_slices(self):\n...\n    @staticmethod\n    def _recursive_lookup(branch, adict, key):\n...\n    def inputs_map(self):\n...\n    def _parameter_units_for_data_units(self, input_units, output_units):\n...\n    @property\n    def input_units(self):\n...\n    @property\n    def input_units_equivalencies(self):\n...\n    @property\n    def input_units_allow_dimensionless(self):\n...\n    @property\n    def input_units_strict(self):\n...\n    @property\n    def return_units(self):\n...\n    def outputs_map(self):\n...\n    @property\n    def has_user_bounding_box(self):\n...\n    def render(self, out=None, coords=None):\n...\n    def replace_submodel(self, name, model):\n...\n    def _set_sub_models_and_parameter_units(self, left, right):\n...\n    def without_units_for_data(self, **kwargs):\n...\n    def with_units_from_data(self, **kwargs):\n...\n\ndef _get_submodel_path(model, name):\n...\n\ndef binary_operation(binoperator, left, right):\n...\n\ndef get_ops(tree, opset):\n...\n\ndef make_subtree_dict(tree, nodepath, tdict, leaflist):\n...\n\n_ORDER_OF_OPERATORS = [('fix_inputs',), ('|',), ('&',), ('+', '-'), ('*', '/'), ('**',)]\nOPERATOR_PRECEDENCE = {}\n\n\ndef fix_inputs(modelinstance, values, bounding_boxes=None, selector_args=None):\n...\n\ndef bind_bounding_box(modelinstance, bounding_box, ignored=None, order='C'):\n...\n\ndef bind_compound_bounding_box(modelinstance, bounding_boxes, selector_args,\n                               create_selector=None, ignored=None, order='C'):\n...\n\ndef custom_model(*args, fit_deriv=None):\n...\n\ndef _custom_model_inputs(func):\n...\n\ndef _custom_model_wrapper(func, fit_deriv=None):\n...\n\ndef render_model(model, arr=None, coords=None):\n...\n\ndef hide_inverse(model):\n\n```\n\n\n---\n\n### Instructions ###\nList only the locations that are likely relevant.\n\n**Format your response exactly like this:**\nfull_path1/file1.py\nfunction: my_function_1\nclass: MyClass1\n\nfull_path2/file2.py\nvariable: my_var\nfunction: MyClass2.my_method\n\nWrap the response in triple backticks. Do not include any explanation.\n"}, "found_edit_locs": ["f\nu\nn\nc\nt\ni\no\nn\n:\n \n_\nc\ns\nt\na\nc\nk\n\n\nf\nu\nn\nc\nt\ni\no\nn\n:\n \n_\nc\no\no\nr\nd\n_\nm\na\nt\nr\ni\nx"], "additional_artifact_loc_edit_location": [{"raw_output_loc": ["```\nastropy/modeling/separable.py\nfunction: _cstack\nfunction: _coord_matrix\n```"]}], "edit_loc_traj": {"prompt": "\nYou are a test case generator.\n\nYour goal is to identify **specific code locations** (functions, classes, or lines) in the following files that must be modified or tested in order to address the GitHub problem.\n\n---\n\n### GitHub Problem Description ###\nModeling's `separability_matrix` does not compute separability correctly for nested CompoundModels\nConsider the following model:\r\n\r\n```python\r\nfrom astropy.modeling import models as m\r\nfrom astropy.modeling.separable import separability_matrix\r\n\r\ncm = m.Linear1D(10) & m.Linear1D(5)\r\n```\r\n\r\nIt's separability matrix as you might expect is a diagonal:\r\n\r\n```python\r\n>>> separability_matrix(cm)\r\narray([[ True, False],\r\n       [False,  True]])\r\n```\r\n\r\nIf I make the model more complex:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True, False],\r\n       [False, False, False,  True]])\r\n```\r\n\r\nThe output matrix is again, as expected, the outputs and inputs to the linear models are separable and independent of each other.\r\n\r\nIf however, I nest these compound models:\r\n```python\r\n>>> separability_matrix(m.Pix2Sky_TAN() & cm)\r\narray([[ True,  True, False, False],\r\n       [ True,  True, False, False],\r\n       [False, False,  True,  True],\r\n       [False, False,  True,  True]])\r\n```\r\nSuddenly the inputs and outputs are no longer separable?\r\n\r\nThis feels like a bug to me, but I might be missing something?\n\n\n---\n\n### Original Test Patch ###\ndiff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -28,6 +28,13 @@\n p1 = models.Polynomial1D(1, name='p1')\n \n \n+cm_4d_expected = (np.array([False, False, True, True]),\n+                  np.array([[True,  True,  False, False],\n+                            [True,  True,  False, False],\n+                            [False, False, True,  False],\n+                            [False, False, False, True]]))\n+\n+\n compound_models = {\n     'cm1': (map3 & sh1 | rot & sh1 | sh1 & sh2 & sh1,\n             (np.array([False, False, True]),\n@@ -52,7 +59,17 @@\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    'cm8': (rot & (sh1 & sh2), cm_4d_expected),\n+    'cm9': (rot & sh1 & sh2, cm_4d_expected),\n+    'cm10': ((rot & sh1) & sh2, cm_4d_expected),\n+    'cm11': (rot & sh1 & (scl1 & scl2),\n+             (np.array([False, False, True, True, True]),\n+              np.array([[True,  True,  False, False, False],\n+                        [True,  True,  False, False, False],\n+                        [False, False, True,  False, False],\n+                        [False, False, False, True,  False],\n+                        [False, False, False, False, True]]))),\n }\n \n \n\n\n---\n\n### Relevant Files and Contents ###\n### astropy/modeling/separable.py\n...\n17|\n18|import numpy as np\n19|\n20|from .core import Model, ModelDefinitionError, CompoundModel\n21|from .mappings import Mapping\n22|\n23|\n24|__all__ = [\"is_separable\", \"separability_matrix\"]\n25|\n26|\n27|def is_separable(transform):\n28|    \"\"\"\n29|    A separability test for the outputs of a transform.\n30|\n31|    Parameters\n32|    ----------\n33|    transform : `~astropy.modeling.core.Model`\n34|        A (compound) model.\n35|\n36|    Returns\n37|    -------\n38|    is_separable : ndarray\n39|        A boolean array with size ``transform.n_outputs`` where\n40|        each element indicates whether the output is independent\n41|        and the result of a separable transform.\n42|\n43|    Examples\n44|    --------\n45|    >>> from astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D\n46|    >>> is_separable(Shift(1) & Shift(2) | Scale(1) & Scale(2))\n47|        array([ True,  True]...)\n48|    >>> is_separable(Shift(1) & Shift(2) | Rotation2D(2))\n49|        array([False, False]...)\n50|    >>> is_separable(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]) | \\\n51|        Polynomial2D(1) & Polynomial2D(2))\n52|        array([False, False]...)\n53|    >>> is_separable(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]))\n54|        array([ True,  True,  True,  True]...)\n55|\n56|    \"\"\"\n57|    if transform.n_inputs == 1 and transform.n_outputs > 1:\n58|        is_separable = np.array([False] * transform.n_outputs).T\n59|        return is_separable\n60|    separable_matrix = _separable(transform)\n61|    is_separable = separable_matrix.sum(1)\n62|    is_separable = np.where(is_separable != 1, False, True)\n63|    return is_separable\n64|\n65|\n66|def separability_matrix(transform):\n67|    \"\"\"\n68|    Compute the correlation between outputs and inputs.\n69|\n70|    Parameters\n71|    ----------\n72|    transform : `~astropy.modeling.core.Model`\n73|        A (compound) model.\n74|\n75|    Returns\n76|    -------\n77|    separable_matrix : ndarray\n78|        A boolean correlation matrix of shape (n_outputs, n_inputs).\n79|        Indicates the dependence of outputs on inputs. For completely\n80|        independent outputs, the diagonal elements are True and\n81|        off-diagonal elements are False.\n82|\n83|    Examples\n84|    --------\n85|    >>> from astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D\n86|    >>> separability_matrix(Shift(1) & Shift(2) | Scale(1) & Scale(2))\n87|        array([[ True, False], [False,  True]]...)\n88|    >>> separability_matrix(Shift(1) & Shift(2) | Rotation2D(2))\n89|        array([[ True,  True], [ True,  True]]...)\n90|    >>> separability_matrix(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]) | \\\n91|        Polynomial2D(1) & Polynomial2D(2))\n92|        array([[ True,  True], [ True,  True]]...)\n93|    >>> separability_matrix(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]))\n94|        array([[ True, False], [False,  True], [ True, False], [False,  True]]...)\n95|\n96|    \"\"\"\n97|    if transform.n_inputs == 1 and transform.n_outputs > 1:\n98|        return np.ones((transform.n_outputs, transform.n_inputs),\n99|                       dtype=np.bool_)\n100|    separable_matrix = _separable(transform)\n101|    separable_matrix = np.where(separable_matrix != 0, True, False)\n102|    return separable_matrix\n103|\n104|\n105|def _compute_n_outputs(left, right):\n106|    \"\"\"\n107|    Compute the number of outputs of two models.\n108|\n109|    The two models are the left and right model to an operation in\n110|    the expression tree of a compound model.\n111|\n112|    Parameters\n113|    ----------\n114|    left, right : `astropy.modeling.Model` or ndarray\n115|        If input is of an array, it is the output of `coord_matrix`.\n116|\n117|    \"\"\"\n118|    if isinstance(left, Model):\n119|        lnout = left.n_outputs\n120|    else:\n121|        lnout = left.shape[0]\n122|    if isinstance(right, Model):\n123|        rnout = right.n_outputs\n124|    else:\n125|        rnout = right.shape[0]\n126|    noutp = lnout + rnout\n127|    return noutp\n128|\n129|\n130|def _arith_oper(left, right):\n131|    \"\"\"\n132|    Function corresponding to one of the arithmetic operators\n133|    ['+', '-'. '*', '/', '**'].\n134|\n135|    This always returns a nonseparable output.\n136|\n137|\n138|    Parameters\n139|    ----------\n140|    left, right : `astropy.modeling.Model` or ndarray\n141|        If input is of an array, it is the output of `coord_matrix`.\n142|\n143|    Returns\n144|    -------\n145|    result : ndarray\n146|        Result from this operation.\n147|    \"\"\"\n148|    # models have the same number of inputs and outputs\n149|    def _n_inputs_outputs(input):\n150|        if isinstance(input, Model):\n151|            n_outputs, n_inputs = input.n_outputs, input.n_inputs\n152|        else:\n153|            n_outputs, n_inputs = input.shape\n154|        return n_inputs, n_outputs\n155|\n156|    left_inputs, left_outputs = _n_inputs_outputs(left)\n157|    right_inputs, right_outputs = _n_inputs_outputs(right)\n158|\n159|    if left_inputs != right_inputs or left_outputs != right_outputs:\n160|        raise ModelDefinitionError(\n161|            \"Unsupported operands for arithmetic operator: left (n_inputs={}, \"\n162|            \"n_outputs={}) and right (n_inputs={}, n_outputs={}); \"\n163|            \"models must have the same n_inputs and the same \"\n164|            \"n_outputs for this operator.\".format(\n165|                left_inputs, left_outputs, right_inputs, right_outputs))\n166|\n167|    result = np.ones((left_outputs, left_inputs))\n168|    return result\n169|\n170|\n171|def _coord_matrix(model, pos, noutp):\n172|    \"\"\"\n173|    Create an array representing inputs and outputs of a simple model.\n174|\n175|    The array has a shape (noutp, model.n_inputs).\n176|\n177|    Parameters\n178|    ----------\n179|    model : `astropy.modeling.Model`\n180|        model\n181|    pos : str\n182|        Position of this model in the expression tree.\n183|        One of ['left', 'right'].\n184|    noutp : int\n185|        Number of outputs of the compound model of which the input model\n186|        is a left or right child.\n187|\n188|    \"\"\"\n189|    if isinstance(model, Mapping):\n190|        axes = []\n191|        for i in model.mapping:\n192|            axis = np.zeros((model.n_inputs,))\n193|            axis[i] = 1\n194|            axes.append(axis)\n195|        m = np.vstack(axes)\n196|        mat = np.zeros((noutp, model.n_inputs))\n197|        if pos == 'left':\n198|            mat[: model.n_outputs, :model.n_inputs] = m\n199|        else:\n200|            mat[-model.n_outputs:, -model.n_inputs:] = m\n201|        return mat\n202|    if not model.separable:\n203|        # this does not work for more than 2 coordinates\n204|        mat = np.zeros((noutp, model.n_inputs))\n205|        if pos == 'left':\n206|            mat[:model.n_outputs, : model.n_inputs] = 1\n207|        else:\n208|            mat[-model.n_outputs:, -model.n_inputs:] = 1\n209|    else:\n210|        mat = np.zeros((noutp, model.n_inputs))\n211|\n212|        for i in range(model.n_inputs):\n213|            mat[i, i] = 1\n214|        if pos == 'right':\n215|            mat = np.roll(mat, (noutp - model.n_outputs))\n216|    return mat\n217|\n218|\n219|def _cstack(left, right):\n220|    \"\"\"\n221|    Function corresponding to '&' operation.\n222|\n223|    Parameters\n224|    ----------\n225|    left, right : `astropy.modeling.Model` or ndarray\n226|        If input is of an array, it is the output of `coord_matrix`.\n227|\n228|    Returns\n229|    -------\n230|    result : ndarray\n231|        Result from this operation.\n232|\n233|    \"\"\"\n234|    noutp = _compute_n_outputs(left, right)\n235|\n236|    if isinstance(left, Model):\n237|        cleft = _coord_matrix(left, 'left', noutp)\n238|    else:\n239|        cleft = np.zeros((noutp, left.shape[1]))\n240|        cleft[: left.shape[0], : left.shape[1]] = left\n241|    if isinstance(right, Model):\n242|        cright = _coord_matrix(right, 'right', noutp)\n243|    else:\n244|        cright = np.zeros((noutp, right.shape[1]))\n245|        cright[-right.shape[0]:, -right.shape[1]:] = 1\n246|\n247|    return np.hstack([cleft, cright])\n248|\n249|\n250|def _cdot(left, right):\n251|    \"\"\"\n252|    Function corresponding to \"|\" operation.\n253|\n254|    Parameters\n255|    ----------\n256|    left, right : `astropy.modeling.Model` or ndarray\n257|        If input is of an array, it is the output of `coord_matrix`.\n258|\n259|    Returns\n260|    -------\n261|    result : ndarray\n262|        Result from this operation.\n263|    \"\"\"\n264|\n265|    left, right = right, left\n266|\n267|    def _n_inputs_outputs(input, position):\n268|        \"\"\"\n269|        Return ``n_inputs``, ``n_outputs`` for a model or coord_matrix.\n270|        \"\"\"\n271|        if isinstance(input, Model):\n272|            coords = _coord_matrix(input, position, input.n_outputs)\n273|        else:\n274|            coords = input\n275|        return coords\n276|\n277|    cleft = _n_inputs_outputs(left, 'left')\n278|    cright = _n_inputs_outputs(right, 'right')\n279|\n280|    try:\n281|        result = np.dot(cleft, cright)\n282|    except ValueError:\n283|        raise ModelDefinitionError(\n284|            'Models cannot be combined with the \"|\" operator; '\n285|            'left coord_matrix is {}, right coord_matrix is {}'.format(\n286|                cright, cleft))\n287|    return result\n288|\n289|\n290|def _separable(transform):\n291|    \"\"\"\n292|    Calculate the separability of outputs.\n293|\n294|    Parameters\n295|    ----------\n296|    transform : `astropy.modeling.Model`\n297|        A transform (usually a compound model).\n298|\n299|    Returns :\n300|    is_separable : ndarray of dtype np.bool\n301|        An array of shape (transform.n_outputs,) of boolean type\n302|        Each element represents the separablity of the corresponding output.\n303|    \"\"\"\n304|    if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n305|        return transform_matrix\n306|    elif isinstance(transform, CompoundModel):\n307|        sepleft = _separable(transform.left)\n308|        sepright = _separable(transform.right)\n309|        return _operators[transform.op](sepleft, sepright)\n310|    elif isinstance(transform, Model):\n311|        return _coord_matrix(transform, 'left', transform.n_outputs)\n312|\n313|\n314|# Maps modeling operators to a function computing and represents the\n315|# relationship of axes as an array of 0-es and 1-s\n316|_operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n317|              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n\n\n### astropy/modeling/core.py\n...\n491|                if value is not None:\n492|                    parts.append(f'{keyword}: {value}')\n493|\n494|            return '\\n'.join(parts)\n495|        except Exception:\n496|            # If any of the above formatting fails fall back on the basic repr\n497|            # (this is particularly useful in debugging)\n498|            return parts[0]\n499|\n500|\n501|class Model(metaclass=_ModelMeta):\n502|    \"\"\"\n503|    Base class for all models.\n504|\n505|    This is an abstract class and should not be instantiated directly.\n506|\n507|    The following initialization arguments apply to the majority of Model\n508|    subclasses by default (exceptions include specialized utility models\n509|    like `~astropy.modeling.mappings.Mapping`).  Parametric models take all\n510|    their parameters as arguments, followed by any of the following optional\n511|    keyword arguments:\n512|\n513|    Parameters\n514|    ----------\n515|    name : str, optional\n516|        A human-friendly name associated with this model instance\n517|        (particularly useful for identifying the individual components of a\n518|        compound model).\n519|\n520|    meta : dict, optional\n521|        An optional dict of user-defined metadata to attach to this model.\n522|        How this is used and interpreted is up to the user or individual use\n523|        case.\n524|\n525|    n_models : int, optional\n526|        If given an integer greater than 1, a *model set* is instantiated\n527|        instead of a single model.  This affects how the parameter arguments\n528|        are interpreted.  In this case each parameter must be given as a list\n529|        or array--elements of this array are taken along the first axis (or\n530|        ``model_set_axis`` if specified), such that the Nth element is the\n531|        value of that parameter for the Nth model in the set.\n532|\n533|        See the section on model sets in the documentation for more details.\n534|\n535|    model_set_axis : int, optional\n536|        This argument only applies when creating a model set (i.e. ``n_models >\n537|        1``).  It changes how parameter values are interpreted.  Normally the\n538|        first axis of each input parameter array (properly the 0th axis) is\n539|        taken as the axis corresponding to the model sets.  However, any axis\n540|        of an input array may be taken as this \"model set axis\".  This accepts\n541|        negative integers as well--for example use ``model_set_axis=-1`` if the\n542|        last (most rapidly changing) axis should be associated with the model\n543|        sets. Also, ``model_set_axis=False`` can be used to tell that a given\n544|        input should be used to evaluate all the models in the model set.\n545|\n546|    fixed : dict, optional\n547|        Dictionary ``{parameter_name: bool}`` setting the fixed constraint\n548|        for one or more parameters.  `True` means the parameter is held fixed\n549|        during fitting and is prevented from updates once an instance of the\n550|        model has been created.\n551|\n552|        Alternatively the `~astropy.modeling.Parameter.fixed` property of a\n553|        parameter may be used to lock or unlock individual parameters.\n554|\n555|    tied : dict, optional\n556|        Dictionary ``{parameter_name: callable}`` of parameters which are\n557|        linked to some other parameter. The dictionary values are callables\n558|        providing the linking relationship.\n559|\n560|        Alternatively the `~astropy.modeling.Parameter.tied` property of a\n561|        parameter may be used to set the ``tied`` constraint on individual\n562|        parameters.\n563|\n564|    bounds : dict, optional\n565|        A dictionary ``{parameter_name: value}`` of lower and upper bounds of\n566|        parameters. Keys are parameter names. Values are a list or a tuple\n567|        of length 2 giving the desired range for the parameter.\n568|\n569|        Alternatively the `~astropy.modeling.Parameter.min` and\n570|        `~astropy.modeling.Parameter.max` or\n571|        ~astropy.modeling.Parameter.bounds` properties of a parameter may be\n572|        used to set bounds on individual parameters.\n573|\n574|    eqcons : list, optional\n575|        List of functions of length n such that ``eqcons[j](x0, *args) == 0.0``\n576|        in a successfully optimized problem.\n577|\n578|    ineqcons : list, optional\n579|        List of functions of length n such that ``ieqcons[j](x0, *args) >=\n580|        0.0`` is a successfully optimized problem.\n581|\n582|    Examples\n583|    --------\n584|    >>> from astropy.modeling import models\n585|    >>> def tie_center(model):\n586|    ...         mean = 50 * model.stddev\n587|    ...         return mean\n588|    >>> tied_parameters = {'mean': tie_center}\n589|\n590|    Specify that ``'mean'`` is a tied parameter in one of two ways:\n591|\n592|    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3,\n593|    ...                        tied=tied_parameters)\n594|\n595|    or\n596|\n597|    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3)\n598|    >>> g1.mean.tied\n599|    False\n600|    >>> g1.mean.tied = tie_center\n601|    >>> g1.mean.tied\n602|    <function tie_center at 0x...>\n603|\n604|    Fixed parameters:\n605|\n606|    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3,\n607|    ...                        fixed={'stddev': True})\n608|    >>> g1.stddev.fixed\n609|    True\n610|\n611|    or\n612|\n613|    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3)\n614|    >>> g1.stddev.fixed\n615|    False\n616|    >>> g1.stddev.fixed = True\n617|    >>> g1.stddev.fixed\n618|    True\n619|    \"\"\"\n620|\n621|    parameter_constraints = Parameter.constraints\n622|    \"\"\"\n623|    Primarily for informational purposes, these are the types of constraints\n624|    that can be set on a model's parameters.\n625|    \"\"\"\n626|\n627|    model_constraints = ('eqcons', 'ineqcons')\n628|    \"\"\"\n629|    Primarily for informational purposes, these are the types of constraints\n630|    that constrain model evaluation.\n631|    \"\"\"\n632|\n633|    param_names = ()\n634|    \"\"\"\n635|    Names of the parameters that describe models of this type.\n636|\n637|    The parameters in this tuple are in the same order they should be passed in\n638|    when initializing a model of a specific type.  Some types of models, such\n639|    as polynomial models, have a different number of parameters depending on\n640|    some other property of the model, such as the degree.\n641|\n642|    When defining a custom model class the value of this attribute is\n643|    automatically set by the `~astropy.modeling.Parameter` attributes defined\n644|    in the class body.\n645|    \"\"\"\n646|\n647|    n_inputs = 0\n648|    \"\"\"The number of inputs.\"\"\"\n649|    n_outputs = 0\n650|    \"\"\" The number of outputs.\"\"\"\n651|\n652|    standard_broadcasting = True\n653|    fittable = False\n654|    linear = True\n655|    _separable = None\n656|    \"\"\" A boolean flag to indicate whether a model is separable.\"\"\"\n657|    meta = metadata.MetaData()\n658|    \"\"\"A dict-like object to store optional information.\"\"\"\n659|\n660|    # By default models either use their own inverse property or have no\n661|    # inverse at all, but users may also assign a custom inverse to a model,\n662|    # optionally; in that case it is of course up to the user to determine\n663|    # whether their inverse is *actually* an inverse to the model they assign\n664|    # it to.\n665|    _inverse = None\n666|    _user_inverse = None\n667|\n668|    _bounding_box = None\n669|    _user_bounding_box = None\n670|\n671|    _has_inverse_bounding_box = False\n672|\n673|    # Default n_models attribute, so that __len__ is still defined even when a\n674|    # model hasn't completed initialization yet\n675|    _n_models = 1\n676|\n677|    # New classes can set this as a boolean value.\n678|    # It is converted to a dictionary mapping input name to a boolean value.\n679|    _input_units_strict = False\n680|\n681|    # Allow dimensionless input (and corresponding output). If this is True,\n682|    # input values to evaluate will gain the units specified in input_units. If\n683|    # this is a dictionary then it should map input name to a bool to allow\n684|    # dimensionless numbers for that input.\n685|    # Only has an effect if input_units is defined.\n686|    _input_units_allow_dimensionless = False\n687|\n688|    # Default equivalencies to apply to input values. If set, this should be a\n689|    # dictionary where each key is a string that corresponds to one of the\n690|    # model inputs. Only has an effect if input_units is defined.\n691|    input_units_equivalencies = None\n692|\n693|    # Covariance matrix can be set by fitter if available.\n694|    # If cov_matrix is available, then std will set as well\n695|    _cov_matrix = None\n696|    _stds = None\n697|\n698|    def __init_subclass__(cls, **kwargs):\n699|        super().__init_subclass__()\n700|\n701|    def __init__(self, *args, meta=None, name=None, **kwargs):\n702|        super().__init__()\n703|        self._default_inputs_outputs()\n704|        if meta is not None:\n705|            self.meta = meta\n706|        self._name = name\n707|        # add parameters to instance level by walking MRO list\n708|        mro = self.__class__.__mro__\n709|        for cls in mro:\n710|            if issubclass(cls, Model):\n711|                for parname, val in cls._parameters_.items():\n712|                    newpar = copy.deepcopy(val)\n713|                    newpar.model = self\n714|                    if parname not in self.__dict__:\n715|                        self.__dict__[parname] = newpar\n716|\n717|        self._initialize_constraints(kwargs)\n718|        kwargs = self._initialize_setters(kwargs)\n719|        # Remaining keyword args are either parameter values or invalid\n720|        # Parameter values must be passed in as keyword arguments in order to\n721|        # distinguish them\n722|        self._initialize_parameters(args, kwargs)\n723|        self._initialize_slices()\n724|        self._initialize_unit_support()\n725|\n726|    def _default_inputs_outputs(self):\n727|        if self.n_inputs == 1 and self.n_outputs == 1:\n728|            self._inputs = (\"x\",)\n729|            self._outputs = (\"y\",)\n730|        elif self.n_inputs == 2 and self.n_outputs == 1:\n731|            self._inputs = (\"x\", \"y\")\n732|            self._outputs = (\"z\",)\n733|        else:\n734|            try:\n735|                self._inputs = tuple(\"x\" + str(idx) for idx in range(self.n_inputs))\n736|                self._outputs = tuple(\"x\" + str(idx) for idx in range(self.n_outputs))\n737|            except TypeError:\n738|                # self.n_inputs and self.n_outputs are properties\n739|                # This is the case when subclasses of Model do not define\n740|                # ``n_inputs``, ``n_outputs``, ``inputs`` or ``outputs``.\n741|                self._inputs = ()\n742|                self._outputs = ()\n743|\n744|    def _initialize_setters(self, kwargs):\n745|        \"\"\"\n746|        This exists to inject defaults for settable properties for models\n747|        originating from `custom_model`.\n748|        \"\"\"\n749|        if hasattr(self, '_settable_properties'):\n750|            setters = {name: kwargs.pop(name, default)\n751|                       for name, default in self._settable_properties.items()}\n752|            for name, value in setters.items():\n753|                setattr(self, name, value)\n754|\n755|        return kwargs\n756|\n757|    @property\n758|    def inputs(self):\n759|        return self._inputs\n760|\n761|    @inputs.setter\n762|    def inputs(self, val):\n763|        if len(val) != self.n_inputs:\n764|            raise ValueError(f\"Expected {self.n_inputs} number of inputs, got {len(val)}.\")\n765|        self._inputs = val\n766|        self._initialize_unit_support()\n767|\n768|    @property\n769|    def outputs(self):\n770|        return self._outputs\n771|\n772|    @outputs.setter\n773|    def outputs(self, val):\n774|        if len(val) != self.n_outputs:\n775|            raise ValueError(f\"Expected {self.n_outputs} number of outputs, got {len(val)}.\")\n776|        self._outputs = val\n777|\n778|    @property\n779|    def n_inputs(self):\n780|        # TODO: remove the code in the ``if`` block when support\n781|        # for models with ``inputs`` as class variables is removed.\n782|        if hasattr(self.__class__, 'n_inputs') and isinstance(self.__class__.n_inputs, property):\n783|            try:\n784|                return len(self.__class__.inputs)\n785|            except TypeError:\n786|                try:\n787|                    return len(self.inputs)\n788|                except AttributeError:\n789|                    return 0\n790|\n791|        return self.__class__.n_inputs\n792|\n793|    @property\n794|    def n_outputs(self):\n795|        # TODO: remove the code in the ``if`` block when support\n796|        # for models with ``outputs`` as class variables is removed.\n797|        if hasattr(self.__class__, 'n_outputs') and isinstance(self.__class__.n_outputs, property):\n798|            try:\n799|                return len(self.__class__.outputs)\n800|            except TypeError:\n801|                try:\n802|                    return len(self.outputs)\n803|                except AttributeError:\n804|                    return 0\n805|\n806|        return self.__class__.n_outputs\n807|\n808|    def _calculate_separability_matrix(self):\n809|        \"\"\"\n810|        This is a hook which customises the behavior of modeling.separable.\n811|\n812|        This allows complex subclasses to customise the separability matrix.\n813|        If it returns `NotImplemented` the default behavior is used.\n814|        \"\"\"\n815|        return NotImplemented\n816|\n817|    def _initialize_unit_support(self):\n818|        \"\"\"\n819|        Convert self._input_units_strict and\n820|        self.input_units_allow_dimensionless to dictionaries\n821|        mapping input name to a boolean value.\n822|        \"\"\"\n823|        if isinstance(self._input_units_strict, bool):\n824|            self._input_units_strict = {key: self._input_units_strict for\n825|                                        key in self.inputs}\n826|\n827|        if isinstance(self._input_units_allow_dimensionless, bool):\n828|            self._input_units_allow_dimensionless = {key: self._input_units_allow_dimensionless\n829|                                                     for key in self.inputs}\n830|\n831|    @property\n832|    def input_units_strict(self):\n833|        \"\"\"\n834|        Enforce strict units on inputs to evaluate. If this is set to True,\n835|        input values to evaluate will be in the exact units specified by\n836|        input_units. If the input quantities are convertible to input_units,\n837|        they are converted. If this is a dictionary then it should map input\n838|        name to a bool to set strict input units for that parameter.\n839|        \"\"\"\n840|        val = self._input_units_strict\n841|        if isinstance(val, bool):\n842|            return {key: val for key in self.inputs}\n843|        return dict(zip(self.inputs, val.values()))\n844|\n845|    @property\n846|    def input_units_allow_dimensionless(self):\n847|        \"\"\"\n848|        Allow dimensionless input (and corresponding output). If this is True,\n849|        input values to evaluate will gain the units specified in input_units. If\n850|        this is a dictionary then it should map input name to a bool to allow\n851|        dimensionless numbers for that input.\n852|        Only has an effect if input_units is defined.\n853|        \"\"\"\n854|\n855|        val = self._input_units_allow_dimensionless\n856|        if isinstance(val, bool):\n857|            return {key: val for key in self.inputs}\n858|        return dict(zip(self.inputs, val.values()))\n859|\n860|    @property\n861|    def uses_quantity(self):\n862|        \"\"\"\n863|        True if this model has been created with `~astropy.units.Quantity`\n864|        objects or if there are no parameters.\n865|\n866|        This can be used to determine if this model should be evaluated with\n867|        `~astropy.units.Quantity` or regular floats.\n868|        \"\"\"\n869|        pisq = [isinstance(p, Quantity) for p in self._param_sets(units=True)]\n870|        return (len(pisq) == 0) or any(pisq)\n871|\n872|    def __repr__(self):\n873|        return self._format_repr()\n874|\n875|    def __str__(self):\n876|        return self._format_str()\n877|\n878|    def __len__(self):\n879|        return self._n_models\n880|\n881|    @staticmethod\n882|    def _strip_ones(intup):\n883|        return tuple(item for item in intup if item != 1)\n884|\n885|    def __setattr__(self, attr, value):\n886|        if isinstance(self, CompoundModel):\n887|            param_names = self._param_names\n888|        param_names = self.param_names\n889|\n890|        if param_names is not None and attr in self.param_names:\n891|            param = self.__dict__[attr]\n892|            value = _tofloat(value)\n893|            if param._validator is not None:\n894|                param._validator(self, value)\n895|            # check consistency with previous shape and size\n896|            eshape = self._param_metrics[attr]['shape']\n897|            if eshape == ():\n898|                eshape = (1,)\n899|            vshape = np.array(value).shape\n900|            if vshape == ():\n901|                vshape = (1,)\n902|            esize = self._param_metrics[attr]['size']\n903|            if (np.size(value) != esize or\n904|                    self._strip_ones(vshape) != self._strip_ones(eshape)):\n905|                raise InputParameterError(\n906|                    \"Value for parameter {0} does not match shape or size\\n\"\n907|                    \"expected by model ({1}, {2}) vs ({3}, {4})\".format(\n908|                        attr, vshape, np.size(value), eshape, esize))\n909|            if param.unit is None:\n910|                if isinstance(value, Quantity):\n911|                    param._unit = value.unit\n912|                    param.value = value.value\n913|                else:\n914|                    param.value = value\n915|            else:\n916|                if not isinstance(value, Quantity):\n917|                    raise UnitsError(f\"The '{param.name}' parameter should be given as a\"\n918|                                     \" Quantity because it was originally \"\n919|                                     \"initialized as a Quantity\")\n920|                param._unit = value.unit\n921|                param.value = value.value\n922|        else:\n923|            if attr in ['fittable', 'linear']:\n924|                self.__dict__[attr] = value\n925|            else:\n926|                super().__setattr__(attr, value)\n927|\n928|    def _pre_evaluate(self, *args, **kwargs):\n929|        \"\"\"\n930|        Model specific input setup that needs to occur prior to model evaluation\n931|        \"\"\"\n932|\n933|        # Broadcast inputs into common size\n934|        inputs, broadcasted_shapes = self.prepare_inputs(*args, **kwargs)\n935|\n936|        # Setup actual model evaluation method\n937|        parameters = self._param_sets(raw=True, units=True)\n938|\n939|        def evaluate(_inputs):\n940|            return self.evaluate(*chain(_inputs, parameters))\n941|\n942|        return evaluate, inputs, broadcasted_shapes, kwargs\n943|\n944|    def get_bounding_box(self, with_bbox=True):\n945|        \"\"\"\n946|        Return the ``bounding_box`` of a model if it exists or ``None``\n947|        otherwise.\n948|\n949|        Parameters\n950|        ----------\n951|        with_bbox :\n952|            The value of the ``with_bounding_box`` keyword argument\n953|            when calling the model. Default is `True` for usage when\n954|            looking up the model's ``bounding_box`` without risk of error.\n955|        \"\"\"\n956|        bbox = None\n957|\n958|        if not isinstance(with_bbox, bool) or with_bbox:\n959|            try:\n960|                bbox = self.bounding_box\n961|            except NotImplementedError:\n962|                pass\n963|\n964|            if isinstance(bbox, CompoundBoundingBox) and not isinstance(with_bbox, bool):\n965|                bbox = bbox[with_bbox]\n966|\n967|        return bbox\n968|\n969|    @property\n970|    def _argnames(self):\n971|        \"\"\"The inputs used to determine input_shape for bounding_box evaluation\"\"\"\n972|        return self.inputs\n973|\n974|    def _validate_input_shape(self, _input, idx, argnames, model_set_axis, check_model_set_axis):\n975|        \"\"\"\n976|        Perform basic validation of a single model input's shape\n977|            -- it has the minimum dimensions for the given model_set_axis\n978|\n979|        Returns the shape of the input if validation succeeds.\n980|        \"\"\"\n981|        input_shape = np.shape(_input)\n982|        # Ensure that the input's model_set_axis matches the model's\n983|        # n_models\n984|        if input_shape and check_model_set_axis:\n985|            # Note: Scalar inputs *only* get a pass on this\n986|            if len(input_shape) < model_set_axis + 1:\n987|                raise ValueError(\n988|                    f\"For model_set_axis={model_set_axis}, all inputs must be at \"\n989|                    f\"least {model_set_axis + 1}-dimensional.\")\n990|            if input_shape[model_set_axis] != self._n_models:\n991|                try:\n992|                    argname = argnames[idx]\n993|                except IndexError:\n994|                    # the case of model.inputs = ()\n995|                    argname = str(idx)\n996|\n997|                raise ValueError(\n998|                    f\"Input argument '{argname}' does not have the correct \"\n999|                    f\"dimensions in model_set_axis={model_set_axis} for a model set with \"\n1000|                    f\"n_models={self._n_models}.\")\n1001|\n1002|        return input_shape\n1003|\n1004|    def _validate_input_shapes(self, inputs, argnames, model_set_axis):\n1005|        \"\"\"\n1006|        Perform basic validation of model inputs\n1007|            --that they are mutually broadcastable and that they have\n1008|            the minimum dimensions for the given model_set_axis.\n1009|\n1010|        If validation succeeds, returns the total shape that will result from\n1011|        broadcasting the input arrays with each other.\n1012|        \"\"\"\n1013|\n1014|        check_model_set_axis = self._n_models > 1 and model_set_axis is not False\n1015|\n1016|        all_shapes = []\n1017|        for idx, _input in enumerate(inputs):\n1018|            all_shapes.append(self._validate_input_shape(_input, idx, argnames,\n1019|                                                         model_set_axis, check_model_set_axis))\n1020|\n1021|        input_shape = check_broadcast(*all_shapes)\n1022|        if input_shape is None:\n1023|            raise ValueError(\n1024|                \"All inputs must have identical shapes or must be scalars.\")\n1025|\n1026|        return input_shape\n1027|\n1028|    def input_shape(self, inputs):\n1029|        \"\"\"Get input shape for bounding_box evaluation\"\"\"\n1030|        return self._validate_input_shapes(inputs, self._argnames, self.model_set_axis)\n1031|\n1032|    def _generic_evaluate(self, evaluate, _inputs, fill_value, with_bbox):\n1033|        \"\"\"\n1034|        Generic model evaluation routine\n1035|            Selects and evaluates model with or without bounding_box enforcement\n1036|        \"\"\"\n1037|\n1038|        # Evaluate the model using the prepared evaluation method either\n1039|        #   enforcing the bounding_box or not.\n1040|        bbox = self.get_bounding_box(with_bbox)\n1041|        if (not isinstance(with_bbox, bool) or with_bbox) and bbox is not None:\n1042|            outputs = bbox.evaluate(evaluate, _inputs, fill_value)\n1043|        else:\n1044|            outputs = evaluate(_inputs)\n1045|        return outputs\n1046|\n1047|    def _post_evaluate(self, inputs, outputs, broadcasted_shapes, with_bbox, **kwargs):\n1048|        \"\"\"\n1049|        Model specific post evaluation processing of outputs\n1050|        \"\"\"\n1051|        if self.get_bounding_box(with_bbox) is None and self.n_outputs == 1:\n1052|            outputs = (outputs,)\n1053|\n1054|        outputs = self.prepare_outputs(broadcasted_shapes, *outputs, **kwargs)\n1055|        outputs = self._process_output_units(inputs, outputs)\n1056|\n1057|        if self.n_outputs == 1:\n1058|            return outputs[0]\n1059|        return outputs\n1060|\n1061|    @property\n1062|    def bbox_with_units(self):\n1063|        return (not isinstance(self, CompoundModel))\n1064|\n1065|    def __call__(self, *args, **kwargs):\n1066|        \"\"\"\n1067|        Evaluate this model using the given input(s) and the parameter values\n1068|        that were specified when the model was instantiated.\n1069|        \"\"\"\n1070|        # Turn any keyword arguments into positional arguments.\n1071|        args, kwargs = self._get_renamed_inputs_as_positional(*args, **kwargs)\n1072|\n1073|        # Read model evaluation related parameters\n1074|        with_bbox = kwargs.pop('with_bounding_box', False)\n1075|        fill_value = kwargs.pop('fill_value', np.nan)\n1076|\n1077|        # prepare for model evaluation (overridden in CompoundModel)\n1078|        evaluate, inputs, broadcasted_shapes, kwargs = self._pre_evaluate(*args, **kwargs)\n1079|\n1080|        outputs = self._generic_evaluate(evaluate, inputs,\n1081|                                         fill_value, with_bbox)\n1082|\n1083|        # post-process evaluation results (overridden in CompoundModel)\n1084|        return self._post_evaluate(inputs, outputs, broadcasted_shapes, with_bbox, **kwargs)\n1085|\n1086|    def _get_renamed_inputs_as_positional(self, *args, **kwargs):\n1087|        def _keyword2positional(kwargs):\n1088|            # Inputs were passed as keyword (not positional) arguments.\n1089|            # Because the signature of the ``__call__`` is defined at\n1090|            # the class level, the name of the inputs cannot be changed at\n1091|            # the instance level and the old names are always present in the\n1092|            # signature of the method. In order to use the new names of the\n1093|            # inputs, the old names are taken out of ``kwargs``, the input\n1094|            # values are sorted in the order of self.inputs and passed as\n1095|            # positional arguments to ``__call__``.\n1096|\n1097|            # These are the keys that are always present as keyword arguments.\n1098|            keys = ['model_set_axis', 'with_bounding_box', 'fill_value',\n1099|                    'equivalencies', 'inputs_map']\n1100|\n1101|            new_inputs = {}\n1102|            # kwargs contain the names of the new inputs + ``keys``\n1103|            allkeys = list(kwargs.keys())\n1104|            # Remove the names of the new inputs from kwargs and save them\n1105|            # to a dict ``new_inputs``.\n1106|            for key in allkeys:\n1107|                if key not in keys:\n1108|                    new_inputs[key] = kwargs[key]\n1109|                    del kwargs[key]\n1110|            return new_inputs, kwargs\n1111|        n_args = len(args)\n1112|\n1113|        new_inputs, kwargs = _keyword2positional(kwargs)\n1114|        n_all_args = n_args + len(new_inputs)\n1115|\n1116|        if n_all_args < self.n_inputs:\n1117|            raise ValueError(f\"Missing input arguments - expected {self.n_inputs}, got {n_all_args}\")\n1118|        elif n_all_args > self.n_inputs:\n1119|            raise ValueError(f\"Too many input arguments - expected {self.n_inputs}, got {n_all_args}\")\n1120|        if n_args == 0:\n1121|            # Create positional arguments from the keyword arguments in ``new_inputs``.\n1122|            new_args = []\n1123|            for k in self.inputs:\n1124|                new_args.append(new_inputs[k])\n1125|        elif n_args != self.n_inputs:\n1126|            # Some inputs are passed as positional, others as keyword arguments.\n1127|            args = list(args)\n1128|\n1129|            # Create positional arguments from the keyword arguments in ``new_inputs``.\n1130|            new_args = []\n1131|            for k in self.inputs:\n1132|                if k in new_inputs:\n1133|                    new_args.append(new_inputs[k])\n1134|                else:\n1135|                    new_args.append(args[0])\n1136|                    del args[0]\n1137|        else:\n1138|            new_args = args\n1139|        return new_args, kwargs\n1140|\n1141|    # *** Properties ***\n1142|    @property\n1143|    def name(self):\n1144|        \"\"\"User-provided name for this model instance.\"\"\"\n1145|\n1146|        return self._name\n1147|\n1148|    @name.setter\n1149|    def name(self, val):\n1150|        \"\"\"Assign a (new) name to this model.\"\"\"\n1151|\n1152|        self._name = val\n1153|\n1154|    @property\n1155|    def model_set_axis(self):\n1156|        \"\"\"\n1157|        The index of the model set axis--that is the axis of a parameter array\n1158|        that pertains to which model a parameter value pertains to--as\n1159|        specified when the model was initialized.\n1160|\n1161|        See the documentation on :ref:`astropy:modeling-model-sets`\n1162|        for more details.\n1163|        \"\"\"\n1164|\n1165|        return self._model_set_axis\n1166|\n1167|    @property\n1168|    def param_sets(self):\n1169|        \"\"\"\n1170|        Return parameters as a pset.\n1171|\n1172|        This is a list with one item per parameter set, which is an array of\n1173|        that parameter's values across all parameter sets, with the last axis\n1174|        associated with the parameter set.\n1175|        \"\"\"\n1176|\n1177|        return self._param_sets()\n1178|\n1179|    @property\n1180|    def parameters(self):\n1181|        \"\"\"\n1182|        A flattened array of all parameter values in all parameter sets.\n1183|\n1184|        Fittable parameters maintain this list and fitters modify it.\n1185|        \"\"\"\n1186|\n1187|        # Currently the sequence of a model's parameters must be contiguous\n1188|        # within the _parameters array (which may be a view of a larger array,\n1189|        # for example when taking a sub-expression of a compound model), so\n1190|        # the assumption here is reliable:\n1191|        if not self.param_names:\n1192|            # Trivial, but not unheard of\n1193|            return self._parameters\n1194|\n1195|        self._parameters_to_array()\n1196|        start = self._param_metrics[self.param_names[0]]['slice'].start\n1197|        stop = self._param_metrics[self.param_names[-1]]['slice'].stop\n1198|\n1199|        return self._parameters[start:stop]\n1200|\n1201|    @parameters.setter\n1202|    def parameters(self, value):\n1203|        \"\"\"\n1204|        Assigning to this attribute updates the parameters array rather than\n1205|        replacing it.\n1206|        \"\"\"\n1207|\n1208|        if not self.param_names:\n1209|            return\n1210|\n1211|        start = self._param_metrics[self.param_names[0]]['slice'].start\n1212|        stop = self._param_metrics[self.param_names[-1]]['slice'].stop\n1213|\n1214|        try:\n1215|            value = np.array(value).flatten()\n1216|            self._parameters[start:stop] = value\n1217|        except ValueError as e:\n1218|            raise InputParameterError(\n1219|                \"Input parameter values not compatible with the model \"\n1220|                \"parameters array: {0}\".format(e))\n1221|        self._array_to_parameters()\n1222|\n1223|    @property\n1224|    def sync_constraints(self):\n1225|        '''\n1226|        This is a boolean property that indicates whether or not accessing constraints\n1227|        automatically check the constituent models current values. It defaults to True\n1228|        on creation of a model, but for fitting purposes it should be set to False\n1229|        for performance reasons.\n1230|        '''\n1231|        if not hasattr(self, '_sync_constraints'):\n1232|            self._sync_constraints = True\n1233|        return self._sync_constraints\n1234|\n1235|    @sync_constraints.setter\n1236|    def sync_constraints(self, value):\n1237|        if not isinstance(value, bool):\n1238|            raise ValueError('sync_constraints only accepts True or False as values')\n1239|        self._sync_constraints = value\n1240|\n1241|    @property\n1242|    def fixed(self):\n1243|        \"\"\"\n1244|        A ``dict`` mapping parameter names to their fixed constraint.\n1245|        \"\"\"\n1246|        if not hasattr(self, '_fixed') or self.sync_constraints:\n1247|            self._fixed = _ConstraintsDict(self, 'fixed')\n1248|        return self._fixed\n1249|\n1250|    @property\n1251|    def bounds(self):\n1252|        \"\"\"\n1253|        A ``dict`` mapping parameter names to their upper and lower bounds as\n1254|        ``(min, max)`` tuples or ``[min, max]`` lists.\n1255|        \"\"\"\n1256|        if not hasattr(self, '_bounds') or self.sync_constraints:\n1257|            self._bounds = _ConstraintsDict(self, 'bounds')\n1258|        return self._bounds\n1259|\n1260|    @property\n1261|    def tied(self):\n1262|        \"\"\"\n1263|        A ``dict`` mapping parameter names to their tied constraint.\n1264|        \"\"\"\n1265|        if not hasattr(self, '_tied') or self.sync_constraints:\n1266|            self._tied = _ConstraintsDict(self, 'tied')\n1267|        return self._tied\n1268|\n1269|    @property\n1270|    def eqcons(self):\n1271|        \"\"\"List of parameter equality constraints.\"\"\"\n1272|\n1273|        return self._mconstraints['eqcons']\n1274|\n1275|    @property\n1276|    def ineqcons(self):\n1277|        \"\"\"List of parameter inequality constraints.\"\"\"\n1278|\n1279|        return self._mconstraints['ineqcons']\n1280|\n1281|    def has_inverse(self):\n1282|        \"\"\"\n1283|        Returns True if the model has an analytic or user\n1284|        inverse defined.\n1285|        \"\"\"\n1286|        try:\n1287|            self.inverse\n1288|        except NotImplementedError:\n1289|            return False\n1290|\n1291|        return True\n1292|\n1293|    @property\n1294|    def inverse(self):\n1295|        \"\"\"\n1296|        Returns a new `~astropy.modeling.Model` instance which performs the\n1297|        inverse transform, if an analytic inverse is defined for this model.\n1298|\n1299|        Even on models that don't have an inverse defined, this property can be\n1300|        set with a manually-defined inverse, such a pre-computed or\n1301|        experimentally determined inverse (often given as a\n1302|        `~astropy.modeling.polynomial.PolynomialModel`, but not by\n1303|        requirement).\n1304|\n1305|        A custom inverse can be deleted with ``del model.inverse``.  In this\n1306|        case the model's inverse is reset to its default, if a default exists\n1307|        (otherwise the default is to raise `NotImplementedError`).\n1308|\n1309|        Note to authors of `~astropy.modeling.Model` subclasses:  To define an\n1310|        inverse for a model simply override this property to return the\n1311|        appropriate model representing the inverse.  The machinery that will\n1312|        make the inverse manually-overridable is added automatically by the\n1313|        base class.\n1314|        \"\"\"\n1315|        if self._user_inverse is not None:\n1316|            return self._user_inverse\n1317|        elif self._inverse is not None:\n1318|            result = self._inverse()\n1319|            if result is not NotImplemented:\n1320|                if not self._has_inverse_bounding_box:\n1321|                    result.bounding_box = None\n1322|                return result\n1323|\n1324|        raise NotImplementedError(\"No analytical or user-supplied inverse transform \"\n1325|                                  \"has been implemented for this model.\")\n1326|\n1327|    @inverse.setter\n1328|    def inverse(self, value):\n1329|        if not isinstance(value, (Model, type(None))):\n1330|            raise ValueError(\n1331|                \"The ``inverse`` attribute may be assigned a `Model` \"\n1332|                \"instance or `None` (where `None` explicitly forces the \"\n1333|                \"model to have no inverse.\")\n1334|\n1335|        self._user_inverse = value\n1336|\n1337|    @inverse.deleter\n1338|    def inverse(self):\n1339|        \"\"\"\n1340|        Resets the model's inverse to its default (if one exists, otherwise\n1341|        the model will have no inverse).\n1342|        \"\"\"\n1343|\n1344|        try:\n1345|            del self._user_inverse\n1346|        except AttributeError:\n1347|            pass\n1348|\n1349|    @property\n1350|    def has_user_inverse(self):\n1351|        \"\"\"\n1352|        A flag indicating whether or not a custom inverse model has been\n1353|        assigned to this model by a user, via assignment to ``model.inverse``.\n1354|        \"\"\"\n1355|        return self._user_inverse is not None\n1356|\n1357|    @property\n1358|    def bounding_box(self):\n1359|        r\"\"\"\n1360|        A `tuple` of length `n_inputs` defining the bounding box limits, or\n1361|        raise `NotImplementedError` for no bounding_box.\n1362|\n1363|        The default limits are given by a ``bounding_box`` property or method\n1364|        defined in the class body of a specific model.  If not defined then\n1365|        this property just raises `NotImplementedError` by default (but may be\n1366|        assigned a custom value by a user).  ``bounding_box`` can be set\n1367|        manually to an array-like object of shape ``(model.n_inputs, 2)``. For\n1368|        further usage, see :ref:`astropy:bounding-boxes`\n1369|\n1370|        The limits are ordered according to the `numpy` ``'C'`` indexing\n1371|        convention, and are the reverse of the model input order,\n1372|        e.g. for inputs ``('x', 'y', 'z')``, ``bounding_box`` is defined:\n1373|\n1374|        * for 1D: ``(x_low, x_high)``\n1375|        * for 2D: ``((y_low, y_high), (x_low, x_high))``\n1376|        * for 3D: ``((z_low, z_high), (y_low, y_high), (x_low, x_high))``\n1377|\n1378|        Examples\n1379|        --------\n1380|\n1381|        Setting the ``bounding_box`` limits for a 1D and 2D model:\n1382|\n1383|        >>> from astropy.modeling.models import Gaussian1D, Gaussian2D\n1384|        >>> model_1d = Gaussian1D()\n1385|        >>> model_2d = Gaussian2D(x_stddev=1, y_stddev=1)\n1386|        >>> model_1d.bounding_box = (-5, 5)\n1387|        >>> model_2d.bounding_box = ((-6, 6), (-5, 5))\n1388|\n1389|        Setting the bounding_box limits for a user-defined 3D `custom_model`:\n1390|\n1391|        >>> from astropy.modeling.models import custom_model\n1392|        >>> def const3d(x, y, z, amp=1):\n1393|        ...    return amp\n1394|        ...\n1395|        >>> Const3D = custom_model(const3d)\n1396|        >>> model_3d = Const3D()\n1397|        >>> model_3d.bounding_box = ((-6, 6), (-5, 5), (-4, 4))\n1398|\n1399|        To reset ``bounding_box`` to its default limits just delete the\n1400|        user-defined value--this will reset it back to the default defined\n1401|        on the class:\n1402|\n1403|        >>> del model_1d.bounding_box\n1404|\n1405|        To disable the bounding box entirely (including the default),\n1406|        set ``bounding_box`` to `None`:\n1407|\n1408|        >>> model_1d.bounding_box = None\n1409|        >>> model_1d.bounding_box  # doctest: +IGNORE_EXCEPTION_DETAIL\n1410|        Traceback (most recent call last):\n1411|        NotImplementedError: No bounding box is defined for this model\n1412|        (note: the bounding box was explicitly disabled for this model;\n1413|        use `del model.bounding_box` to restore the default bounding box,\n1414|        if one is defined for this model).\n1415|        \"\"\"\n1416|\n1417|        if self._user_bounding_box is not None:\n1418|            if self._user_bounding_box is NotImplemented:\n1419|                raise NotImplementedError(\n1420|                    \"No bounding box is defined for this model (note: the \"\n1421|                    \"bounding box was explicitly disabled for this model; \"\n1422|                    \"use `del model.bounding_box` to restore the default \"\n1423|                    \"bounding box, if one is defined for this model).\")\n1424|            return self._user_bounding_box\n1425|        elif self._bounding_box is None:\n1426|            raise NotImplementedError(\n1427|                \"No bounding box is defined for this model.\")\n1428|        elif isinstance(self._bounding_box, ModelBoundingBox):\n1429|            # This typically implies a hard-coded bounding box.  This will\n1430|            # probably be rare, but it is an option\n1431|            return self._bounding_box\n1432|        elif isinstance(self._bounding_box, types.MethodType):\n1433|            return ModelBoundingBox.validate(self, self._bounding_box())\n1434|        else:\n1435|            # The only other allowed possibility is that it's a ModelBoundingBox\n1436|            # subclass, so we call it with its default arguments and return an\n1437|            # instance of it (that can be called to recompute the bounding box\n1438|            # with any optional parameters)\n1439|            # (In other words, in this case self._bounding_box is a *class*)\n1440|            bounding_box = self._bounding_box((), model=self)()\n1441|            return self._bounding_box(bounding_box, model=self)\n1442|\n1443|    @bounding_box.setter\n1444|    def bounding_box(self, bounding_box):\n1445|        \"\"\"\n1446|        Assigns the bounding box limits.\n1447|        \"\"\"\n1448|\n1449|        if bounding_box is None:\n1450|            cls = None\n1451|            # We use this to explicitly set an unimplemented bounding box (as\n1452|            # opposed to no user bounding box defined)\n1453|            bounding_box = NotImplemented\n1454|        elif (isinstance(bounding_box, CompoundBoundingBox) or\n1455|              isinstance(bounding_box, dict)):\n1456|            cls = CompoundBoundingBox\n1457|        elif (isinstance(self._bounding_box, type) and\n1458|              issubclass(self._bounding_box, ModelBoundingBox)):\n1459|            cls = self._bounding_box\n1460|        else:\n1461|            cls = ModelBoundingBox\n1462|\n1463|        if cls is not None:\n1464|            try:\n1465|                bounding_box = cls.validate(self, bounding_box, _preserve_ignore=True)\n1466|            except ValueError as exc:\n1467|                raise ValueError(exc.args[0])\n1468|\n1469|        self._user_bounding_box = bounding_box\n1470|\n1471|    def set_slice_args(self, *args):\n1472|        if isinstance(self._user_bounding_box, CompoundBoundingBox):\n1473|            self._user_bounding_box.slice_args = args\n1474|        else:\n1475|            raise RuntimeError('The bounding_box for this model is not compound')\n1476|\n1477|    @bounding_box.deleter\n1478|    def bounding_box(self):\n1479|        self._user_bounding_box = None\n1480|\n1481|    @property\n1482|    def has_user_bounding_box(self):\n1483|        \"\"\"\n1484|        A flag indicating whether or not a custom bounding_box has been\n1485|        assigned to this model by a user, via assignment to\n1486|        ``model.bounding_box``.\n1487|        \"\"\"\n1488|\n1489|        return self._user_bounding_box is not None\n1490|\n1491|    @property\n1492|    def cov_matrix(self):\n1493|        \"\"\"\n1494|        Fitter should set covariance matrix, if available.\n1495|        \"\"\"\n1496|        return self._cov_matrix\n1497|\n1498|    @cov_matrix.setter\n1499|    def cov_matrix(self, cov):\n1500|\n1501|        self._cov_matrix = cov\n1502|\n1503|        unfix_untied_params = [p for p in self.param_names if (self.fixed[p] is False)\n1504|                               and (self.tied[p] is False)]\n1505|        if type(cov) == list:  # model set\n1506|            param_stds = []\n1507|            for c in cov:\n1508|                param_stds.append([np.sqrt(x) if x > 0 else None for x in np.diag(c.cov_matrix)])\n1509|            for p, param_name in enumerate(unfix_untied_params):\n1510|                par = getattr(self, param_name)\n1511|                par.std = [item[p] for item in param_stds]\n1512|                setattr(self, param_name, par)\n1513|        else:\n1514|            param_stds = [np.sqrt(x) if x > 0 else None for x in np.diag(cov.cov_matrix)]\n1515|            for param_name in unfix_untied_params:\n1516|                par = getattr(self, param_name)\n1517|                par.std = param_stds.pop(0)\n1518|                setattr(self, param_name, par)\n1519|\n1520|    @property\n1521|    def stds(self):\n1522|        \"\"\"\n1523|        Standard deviation of parameters, if covariance matrix is available.\n1524|        \"\"\"\n1525|        return self._stds\n1526|\n1527|    @stds.setter\n1528|    def stds(self, stds):\n1529|        self._stds = stds\n1530|\n1531|    @property\n1532|    def separable(self):\n1533|        \"\"\" A flag indicating whether a model is separable.\"\"\"\n1534|\n1535|        if self._separable is not None:\n1536|            return self._separable\n1537|        raise NotImplementedError(\n1538|            'The \"separable\" property is not defined for '\n1539|            'model {}'.format(self.__class__.__name__))\n1540|\n1541|    # *** Public methods ***\n1542|\n1543|    def without_units_for_data(self, **kwargs):\n1544|        \"\"\"\n1545|        Return an instance of the model for which the parameter values have\n1546|        been converted to the right units for the data, then the units have\n1547|        been stripped away.\n1548|\n1549|        The input and output Quantity objects should be given as keyword\n1550|        arguments.\n1551|\n1552|        Notes\n1553|        -----\n1554|\n1555|        This method is needed in order to be able to fit models with units in\n1556|        the parameters, since we need to temporarily strip away the units from\n1557|        the model during the fitting (which might be done by e.g. scipy\n1558|        functions).\n1559|\n1560|        The units that the parameters should be converted to are not\n1561|        necessarily the units of the input data, but are derived from them.\n1562|        Model subclasses that want fitting to work in the presence of\n1563|        quantities need to define a ``_parameter_units_for_data_units`` method\n1564|        that takes the input and output units (as two dictionaries) and\n1565|        returns a dictionary giving the target units for each parameter.\n1566|\n1567|        \"\"\"\n1568|        model = self.copy()\n1569|\n1570|        inputs_unit = {inp: getattr(kwargs[inp], 'unit', dimensionless_unscaled)\n1571|                       for inp in self.inputs if kwargs[inp] is not None}\n1572|\n1573|        outputs_unit = {out: getattr(kwargs[out], 'unit', dimensionless_unscaled)\n1574|                        for out in self.outputs if kwargs[out] is not None}\n1575|        parameter_units = self._parameter_units_for_data_units(inputs_unit,\n1576|                                                               outputs_unit)\n1577|        for name, unit in parameter_units.items():\n1578|            parameter = getattr(model, name)\n1579|            if parameter.unit is not None:\n1580|                parameter.value = parameter.quantity.to(unit).value\n1581|                parameter._set_unit(None, force=True)\n1582|\n1583|        if isinstance(model, CompoundModel):\n1584|            model.strip_units_from_tree()\n1585|\n1586|        return model\n1587|\n1588|    def output_units(self, **kwargs):\n1589|        \"\"\"\n1590|        Return a dictionary of output units for this model given a dictionary\n1591|        of fitting inputs and outputs\n1592|\n1593|        The input and output Quantity objects should be given as keyword\n1594|        arguments.\n1595|\n1596|        Notes\n1597|        -----\n1598|\n1599|        This method is needed in order to be able to fit models with units in\n1600|        the parameters, since we need to temporarily strip away the units from\n1601|        the model during the fitting (which might be done by e.g. scipy\n1602|        functions).\n1603|\n1604|        This method will force extra model evaluations, which maybe computationally\n1605|        expensive. To avoid this, one can add a return_units property to the model,\n1606|        see :ref:`astropy:models_return_units`.\n1607|        \"\"\"\n1608|        units = self.return_units\n1609|\n1610|        if units is None or units == {}:\n1611|            inputs = {inp: kwargs[inp] for inp in self.inputs}\n1612|\n1613|            values = self(**inputs)\n1614|            if self.n_outputs == 1:\n1615|                values = (values,)\n1616|\n1617|            units = {out: getattr(values[index], 'unit', dimensionless_unscaled)\n1618|                     for index, out in enumerate(self.outputs)}\n1619|\n1620|        return units\n1621|\n1622|    def strip_units_from_tree(self):\n1623|        for item in self._leaflist:\n1624|            for parname in item.param_names:\n1625|                par = getattr(item, parname)\n1626|                par._set_unit(None, force=True)\n1627|\n1628|    def with_units_from_data(self, **kwargs):\n1629|        \"\"\"\n1630|        Return an instance of the model which has units for which the parameter\n1631|        values are compatible with the data units specified.\n1632|\n1633|        The input and output Quantity objects should be given as keyword\n1634|        arguments.\n1635|\n1636|        Notes\n1637|        -----\n1638|\n1639|        This method is needed in order to be able to fit models with units in\n1640|        the parameters, since we need to temporarily strip away the units from\n1641|        the model during the fitting (which might be done by e.g. scipy\n1642|        functions).\n1643|\n1644|        The units that the parameters will gain are not necessarily the units\n1645|        of the input data, but are derived from them. Model subclasses that\n1646|        want fitting to work in the presence of quantities need to define a\n1647|        ``_parameter_units_for_data_units`` method that takes the input and output\n1648|        units (as two dictionaries) and returns a dictionary giving the target\n1649|        units for each parameter.\n1650|        \"\"\"\n1651|        model = self.copy()\n1652|        inputs_unit = {inp: getattr(kwargs[inp], 'unit', dimensionless_unscaled)\n1653|                       for inp in self.inputs if kwargs[inp] is not None}\n1654|\n1655|        outputs_unit = {out: getattr(kwargs[out], 'unit', dimensionless_unscaled)\n1656|                        for out in self.outputs if kwargs[out] is not None}\n1657|\n1658|        parameter_units = self._parameter_units_for_data_units(inputs_unit,\n1659|                                                               outputs_unit)\n1660|\n1661|        # We are adding units to parameters that already have a value, but we\n1662|        # don't want to convert the parameter, just add the unit directly,\n1663|        # hence the call to ``_set_unit``.\n1664|        for name, unit in parameter_units.items():\n1665|            parameter = getattr(model, name)\n1666|            parameter._set_unit(unit, force=True)\n1667|\n1668|        return model\n1669|\n1670|    @property\n1671|    def _has_units(self):\n1672|        # Returns True if any of the parameters have units\n1673|        for param in self.param_names:\n1674|            if getattr(self, param).unit is not None:\n1675|                return True\n1676|        else:\n1677|            return False\n1678|\n1679|    @property\n1680|    def _supports_unit_fitting(self):\n1681|        # If the model has a ``_parameter_units_for_data_units`` method, this\n1682|        # indicates that we have enough information to strip the units away\n1683|        # and add them back after fitting, when fitting quantities\n1684|        return hasattr(self, '_parameter_units_for_data_units')\n1685|\n1686|    @abc.abstractmethod\n1687|    def evaluate(self, *args, **kwargs):\n1688|        \"\"\"Evaluate the model on some input variables.\"\"\"\n1689|\n1690|    def sum_of_implicit_terms(self, *args, **kwargs):\n1691|        \"\"\"\n1692|        Evaluate the sum of any implicit model terms on some input variables.\n1693|        This includes any fixed terms used in evaluating a linear model that\n1694|        do not have corresponding parameters exposed to the user. The\n1695|        prototypical case is `astropy.modeling.functional_models.Shift`, which\n1696|        corresponds to a function y = a + bx, where b=1 is intrinsically fixed\n1697|        by the type of model, such that sum_of_implicit_terms(x) == x. This\n1698|        method is needed by linear fitters to correct the dependent variable\n1699|        for the implicit term(s) when solving for the remaining terms\n1700|        (ie. a = y - bx).\n1701|        \"\"\"\n1702|\n1703|    def render(self, out=None, coords=None):\n1704|        \"\"\"\n1705|        Evaluate a model at fixed positions, respecting the ``bounding_box``.\n1706|\n1707|        The key difference relative to evaluating the model directly is that\n1708|        this method is limited to a bounding box if the `Model.bounding_box`\n1709|        attribute is set.\n1710|\n1711|        Parameters\n1712|        ----------\n1713|        out : `numpy.ndarray`, optional\n1714|            An array that the evaluated model will be added to.  If this is not\n1715|            given (or given as ``None``), a new array will be created.\n1716|        coords : array-like, optional\n1717|            An array to be used to translate from the model's input coordinates\n1718|            to the ``out`` array. It should have the property that\n1719|            ``self(coords)`` yields the same shape as ``out``.  If ``out`` is\n1720|            not specified, ``coords`` will be used to determine the shape of\n1721|            the returned array. If this is not provided (or None), the model\n1722|            will be evaluated on a grid determined by `Model.bounding_box`.\n1723|\n1724|        Returns\n1725|        -------\n1726|        out : `numpy.ndarray`\n1727|            The model added to ``out`` if  ``out`` is not ``None``, or else a\n1728|            new array from evaluating the model over ``coords``.\n1729|            If ``out`` and ``coords`` are both `None`, the returned array is\n1730|            limited to the `Model.bounding_box` limits. If\n1731|            `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be\n1732|            passed.\n1733|\n1734|        Raises\n1735|        ------\n1736|        ValueError\n1737|            If ``coords`` are not given and the the `Model.bounding_box` of\n1738|            this model is not set.\n1739|\n1740|        Examples\n1741|        --------\n1742|        :ref:`astropy:bounding-boxes`\n1743|        \"\"\"\n1744|\n1745|        try:\n1746|            bbox = self.bounding_box\n1747|        except NotImplementedError:\n1748|            bbox = None\n1749|\n1750|        if isinstance(bbox, ModelBoundingBox):\n1751|            bbox = bbox.bounding_box()\n1752|\n1753|        ndim = self.n_inputs\n1754|\n1755|        if (coords is None) and (out is None) and (bbox is None):\n1756|            raise ValueError('If no bounding_box is set, '\n1757|                             'coords or out must be input.')\n1758|\n1759|        # for consistent indexing\n1760|        if ndim == 1:\n1761|            if coords is not None:\n1762|                coords = [coords]\n1763|            if bbox is not None:\n1764|                bbox = [bbox]\n1765|\n1766|        if coords is not None:\n1767|            coords = np.asanyarray(coords, dtype=float)\n1768|            # Check dimensions match out and model\n1769|            assert len(coords) == ndim\n1770|            if out is not None:\n1771|                if coords[0].shape != out.shape:\n1772|                    raise ValueError('inconsistent shape of the output.')\n1773|            else:\n1774|                out = np.zeros(coords[0].shape)\n1775|\n1776|        if out is not None:\n1777|            out = np.asanyarray(out)\n1778|            if out.ndim != ndim:\n1779|                raise ValueError('the array and model must have the same '\n1780|                                 'number of dimensions.')\n1781|\n1782|        if bbox is not None:\n1783|            # Assures position is at center pixel,\n1784|            # important when using add_array.\n1785|            pd = np.array([(np.mean(bb), np.ceil((bb[1] - bb[0]) / 2))\n1786|                           for bb in bbox]).astype(int).T\n1787|            pos, delta = pd\n1788|\n1789|            if coords is not None:\n1790|                sub_shape = tuple(delta * 2 + 1)\n1791|                sub_coords = np.array([extract_array(c, sub_shape, pos)\n1792|                                       for c in coords])\n1793|            else:\n1794|                limits = [slice(p - d, p + d + 1, 1) for p, d in pd.T]\n1795|                sub_coords = np.mgrid[limits]\n1796|\n1797|            sub_coords = sub_coords[::-1]\n1798|\n1799|            if out is None:\n1800|                out = self(*sub_coords)\n1801|            else:\n1802|                try:\n1803|                    out = add_array(out, self(*sub_coords), pos)\n1804|                except ValueError:\n1805|                    raise ValueError(\n1806|                        'The `bounding_box` is larger than the input out in '\n1807|                        'one or more dimensions. Set '\n1808|                        '`model.bounding_box = None`.')\n1809|        else:\n1810|            if coords is None:\n1811|                im_shape = out.shape\n1812|                limits = [slice(i) for i in im_shape]\n1813|                coords = np.mgrid[limits]\n1814|\n1815|            coords = coords[::-1]\n1816|\n1817|            out += self(*coords)\n1818|\n1819|        return out\n1820|\n1821|    @property\n1822|    def input_units(self):\n1823|        \"\"\"\n1824|        This property is used to indicate what units or sets of units the\n1825|        evaluate method expects, and returns a dictionary mapping inputs to\n1826|        units (or `None` if any units are accepted).\n1827|\n1828|        Model sub-classes can also use function annotations in evaluate to\n1829|        indicate valid input units, in which case this property should\n1830|        not be overridden since it will return the input units based on the\n1831|        annotations.\n1832|        \"\"\"\n1833|        if hasattr(self, '_input_units'):\n1834|            return self._input_units\n1835|        elif hasattr(self.evaluate, '__annotations__'):\n1836|            annotations = self.evaluate.__annotations__.copy()\n1837|            annotations.pop('return', None)\n1838|            if annotations:\n1839|                # If there are not annotations for all inputs this will error.\n1840|                return dict((name, annotations[name]) for name in self.inputs)\n1841|        else:\n1842|            # None means any unit is accepted\n1843|            return None\n1844|\n1845|    @property\n1846|    def return_units(self):\n1847|        \"\"\"\n1848|        This property is used to indicate what units or sets of units the\n1849|        output of evaluate should be in, and returns a dictionary mapping\n1850|        outputs to units (or `None` if any units are accepted).\n1851|\n1852|        Model sub-classes can also use function annotations in evaluate to\n1853|        indicate valid output units, in which case this property should not be\n1854|        overridden since it will return the return units based on the\n1855|        annotations.\n1856|        \"\"\"\n1857|        if hasattr(self, '_return_units'):\n1858|            return self._return_units\n1859|        elif hasattr(self.evaluate, '__annotations__'):\n1860|            return self.evaluate.__annotations__.get('return', None)\n1861|        else:\n1862|            # None means any unit is accepted\n1863|            return None\n1864|\n1865|    def _prepare_inputs_single_model(self, params, inputs, **kwargs):\n1866|        broadcasts = []\n1867|        for idx, _input in enumerate(inputs):\n1868|            input_shape = _input.shape\n1869|\n1870|            # Ensure that array scalars are always upgrade to 1-D arrays for the\n1871|            # sake of consistency with how parameters work.  They will be cast back\n1872|            # to scalars at the end\n1873|            if not input_shape:\n1874|                inputs[idx] = _input.reshape((1,))\n1875|\n1876|            if not params:\n1877|                max_broadcast = input_shape\n1878|            else:\n1879|                max_broadcast = ()\n1880|\n1881|            for param in params:\n1882|                try:\n1883|                    if self.standard_broadcasting:\n1884|                        broadcast = check_broadcast(input_shape, param.shape)\n1885|                    else:\n1886|                        broadcast = input_shape\n1887|                except IncompatibleShapeError:\n1888|                    raise ValueError(\n1889|                        \"self input argument {0!r} of shape {1!r} cannot be \"\n1890|                        \"broadcast with parameter {2!r} of shape \"\n1891|                        \"{3!r}.\".format(self.inputs[idx], input_shape,\n1892|                                        param.name, param.shape))\n1893|\n1894|                if len(broadcast) > len(max_broadcast):\n1895|                    max_broadcast = broadcast\n1896|                elif len(broadcast) == len(max_broadcast):\n1897|                    max_broadcast = max(max_broadcast, broadcast)\n1898|\n1899|            broadcasts.append(max_broadcast)\n1900|\n1901|        if self.n_outputs > self.n_inputs:\n1902|            extra_outputs = self.n_outputs - self.n_inputs\n1903|            if not broadcasts:\n1904|                # If there were no inputs then the broadcasts list is empty\n1905|                # just add a None since there is no broadcasting of outputs and\n1906|                # inputs necessary (see _prepare_outputs_single_self)\n1907|                broadcasts.append(None)\n1908|            broadcasts.extend([broadcasts[0]] * extra_outputs)\n1909|\n1910|        return inputs, (broadcasts,)\n1911|\n1912|    @staticmethod\n1913|    def _remove_axes_from_shape(shape, axis):\n1914|        \"\"\"\n1915|        Given a shape tuple as the first input, construct a new one by  removing\n1916|        that particular axis from the shape and all preceeding axes. Negative axis\n1917|        numbers are permittted, where the axis is relative to the last axis.\n1918|        \"\"\"\n1919|        if len(shape) == 0:\n1920|            return shape\n1921|        if axis < 0:\n1922|            axis = len(shape) + axis\n1923|            return shape[:axis] + shape[axis+1:]\n1924|        if axis >= len(shape):\n1925|            axis = len(shape)-1\n1926|        shape = shape[axis+1:]\n1927|        return shape\n1928|\n1929|    def _prepare_inputs_model_set(self, params, inputs, model_set_axis_input,\n1930|                                  **kwargs):\n1931|        reshaped = []\n1932|        pivots = []\n1933|\n1934|        model_set_axis_param = self.model_set_axis  # needed to reshape param\n1935|        for idx, _input in enumerate(inputs):\n1936|            max_param_shape = ()\n1937|            if self._n_models > 1 and model_set_axis_input is not False:\n1938|                # Use the shape of the input *excluding* the model axis\n1939|                input_shape = (_input.shape[:model_set_axis_input] +\n1940|                               _input.shape[model_set_axis_input + 1:])\n1941|            else:\n1942|                input_shape = _input.shape\n1943|\n1944|            for param in params:\n1945|                try:\n1946|                    check_broadcast(input_shape,\n1947|                                    self._remove_axes_from_shape(param.shape,\n1948|                                                                 model_set_axis_param))\n1949|                except IncompatibleShapeError:\n1950|                    raise ValueError(\n1951|                        \"Model input argument {0!r} of shape {1!r} cannot be \"\n1952|                        \"broadcast with parameter {2!r} of shape \"\n1953|                        \"{3!r}.\".format(self.inputs[idx], input_shape,\n1954|                                        param.name,\n1955|                                        self._remove_axes_from_shape(param.shape,\n1956|                                                                     model_set_axis_param)))\n1957|\n1958|                if len(param.shape) - 1 > len(max_param_shape):\n1959|                    max_param_shape = self._remove_axes_from_shape(param.shape,\n1960|                                                                   model_set_axis_param)\n1961|\n1962|            # We've now determined that, excluding the model_set_axis, the\n1963|            # input can broadcast with all the parameters\n1964|            input_ndim = len(input_shape)\n1965|            if model_set_axis_input is False:\n1966|                if len(max_param_shape) > input_ndim:\n1967|                    # Just needs to prepend new axes to the input\n1968|                    n_new_axes = 1 + len(max_param_shape) - input_ndim\n1969|                    new_axes = (1,) * n_new_axes\n1970|                    new_shape = new_axes + _input.shape\n1971|                    pivot = model_set_axis_param\n1972|                else:\n1973|                    pivot = input_ndim - len(max_param_shape)\n1974|                    new_shape = (_input.shape[:pivot] + (1,) +\n1975|                                 _input.shape[pivot:])\n1976|                new_input = _input.reshape(new_shape)\n1977|            else:\n1978|                if len(max_param_shape) >= input_ndim:\n1979|                    n_new_axes = len(max_param_shape) - input_ndim\n1980|                    pivot = self.model_set_axis\n1981|                    new_axes = (1,) * n_new_axes\n1982|                    new_shape = (_input.shape[:pivot + 1] + new_axes +\n1983|                                 _input.shape[pivot + 1:])\n1984|                    new_input = _input.reshape(new_shape)\n1985|                else:\n1986|                    pivot = _input.ndim - len(max_param_shape) - 1\n1987|                    new_input = np.rollaxis(_input, model_set_axis_input,\n1988|                                            pivot + 1)\n1989|            pivots.append(pivot)\n1990|            reshaped.append(new_input)\n1991|\n1992|        if self.n_inputs < self.n_outputs:\n1993|            pivots.extend([model_set_axis_input] * (self.n_outputs - self.n_inputs))\n1994|\n1995|        return reshaped, (pivots,)\n1996|\n1997|    def prepare_inputs(self, *inputs, model_set_axis=None, equivalencies=None,\n1998|                       **kwargs):\n1999|        \"\"\"\n2000|        This method is used in `~astropy.modeling.Model.__call__` to ensure\n2001|        that all the inputs to the model can be broadcast into compatible\n2002|        shapes (if one or both of them are input as arrays), particularly if\n2003|        there are more than one parameter sets. This also makes sure that (if\n2004|        applicable) the units of the input will be compatible with the evaluate\n2005|        method.\n2006|        \"\"\"\n2007|        # When we instantiate the model class, we make sure that __call__ can\n2008|        # take the following two keyword arguments: model_set_axis and\n2009|        # equivalencies.\n2010|        if model_set_axis is None:\n2011|            # By default the model_set_axis for the input is assumed to be the\n2012|            # same as that for the parameters the model was defined with\n2013|            # TODO: Ensure that negative model_set_axis arguments are respected\n2014|            model_set_axis = self.model_set_axis\n2015|\n2016|        params = [getattr(self, name) for name in self.param_names]\n2017|        inputs = [np.asanyarray(_input, dtype=float) for _input in inputs]\n2018|\n2019|        self._validate_input_shapes(inputs, self.inputs, model_set_axis)\n2020|\n2021|        inputs_map = kwargs.get('inputs_map', None)\n2022|\n2023|        inputs = self._validate_input_units(inputs, equivalencies, inputs_map)\n2024|\n2025|        # The input formatting required for single models versus a multiple\n2026|        # model set are different enough that they've been split into separate\n2027|        # subroutines\n2028|        if self._n_models == 1:\n2029|            return self._prepare_inputs_single_model(params, inputs, **kwargs)\n2030|        else:\n2031|            return self._prepare_inputs_model_set(params, inputs,\n2032|                                                  model_set_axis, **kwargs)\n2033|\n2034|    def _validate_input_units(self, inputs, equivalencies=None, inputs_map=None):\n2035|        inputs = list(inputs)\n2036|        name = self.name or self.__class__.__name__\n2037|        # Check that the units are correct, if applicable\n2038|\n2039|        if self.input_units is not None:\n2040|            # If a leaflist is provided that means this is in the context of\n2041|            # a compound model and it is necessary to create the appropriate\n2042|            # alias for the input coordinate name for the equivalencies dict\n2043|            if inputs_map:\n2044|                edict = {}\n2045|                for mod, mapping in inputs_map:\n2046|                    if self is mod:\n2047|                        edict[mapping[0]] = equivalencies[mapping[1]]\n2048|            else:\n2049|                edict = equivalencies\n2050|            # We combine any instance-level input equivalencies with user\n2051|            # specified ones at call-time.\n2052|            input_units_equivalencies = _combine_equivalency_dict(self.inputs,\n2053|                                                                  edict,\n2054|                                                                  self.input_units_equivalencies)\n2055|\n2056|            # We now iterate over the different inputs and make sure that their\n2057|            # units are consistent with those specified in input_units.\n2058|            for i in range(len(inputs)):\n2059|\n2060|                input_name = self.inputs[i]\n2061|                input_unit = self.input_units.get(input_name, None)\n2062|\n2063|                if input_unit is None:\n2064|                    continue\n2065|\n2066|                if isinstance(inputs[i], Quantity):\n2067|\n2068|                    # We check for consistency of the units with input_units,\n2069|                    # taking into account any equivalencies\n2070|\n2071|                    if inputs[i].unit.is_equivalent(\n2072|                            input_unit,\n2073|                            equivalencies=input_units_equivalencies[input_name]):\n2074|\n2075|                        # If equivalencies have been specified, we need to\n2076|                        # convert the input to the input units - this is\n2077|                        # because some equivalencies are non-linear, and\n2078|                        # we need to be sure that we evaluate the model in\n2079|                        # its own frame of reference. If input_units_strict\n2080|                        # is set, we also need to convert to the input units.\n2081|                        if len(input_units_equivalencies) > 0 or self.input_units_strict[input_name]:\n2082|                            inputs[i] = inputs[i].to(input_unit,\n2083|                                                     equivalencies=input_units_equivalencies[input_name])\n2084|\n2085|                    else:\n2086|\n2087|                        # We consider the following two cases separately so as\n2088|                        # to be able to raise more appropriate/nicer exceptions\n2089|\n2090|                        if input_unit is dimensionless_unscaled:\n2091|                            raise UnitsError(\"{0}: Units of input '{1}', {2} ({3}),\"\n2092|                                             \"could not be converted to \"\n2093|                                             \"required dimensionless \"\n2094|                                             \"input\".format(name,\n2095|                                                            self.inputs[i],\n2096|                                                            inputs[i].unit,\n2097|                                                            inputs[i].unit.physical_type))\n2098|                        else:\n2099|                            raise UnitsError(\"{0}: Units of input '{1}', {2} ({3}),\"\n2100|                                             \" could not be \"\n2101|                                             \"converted to required input\"\n2102|                                             \" units of {4} ({5})\".format(\n2103|                                                 name,\n2104|                                                 self.inputs[i],\n2105|                                                 inputs[i].unit,\n2106|                                                 inputs[i].unit.physical_type,\n2107|                                                 input_unit,\n2108|                                                 input_unit.physical_type))\n2109|                else:\n2110|\n2111|                    # If we allow dimensionless input, we add the units to the\n2112|                    # input values without conversion, otherwise we raise an\n2113|                    # exception.\n2114|\n2115|                    if (not self.input_units_allow_dimensionless[input_name] and\n2116|                        input_unit is not dimensionless_unscaled and\n2117|                        input_unit is not None):\n2118|                        if np.any(inputs[i] != 0):\n2119|                            raise UnitsError(\"{0}: Units of input '{1}', (dimensionless), could not be \"\n2120|                                             \"converted to required input units of \"\n2121|                                             \"{2} ({3})\".format(name, self.inputs[i], input_unit,\n2122|                                                                input_unit.physical_type))\n2123|        return inputs\n2124|\n2125|    def _process_output_units(self, inputs, outputs):\n2126|        inputs_are_quantity = any([isinstance(i, Quantity) for i in inputs])\n2127|        if self.return_units and inputs_are_quantity:\n2128|            # We allow a non-iterable unit only if there is one output\n2129|            if self.n_outputs == 1 and not isiterable(self.return_units):\n2130|                return_units = {self.outputs[0]: self.return_units}\n2131|            else:\n2132|                return_units = self.return_units\n2133|\n2134|            outputs = tuple([Quantity(out, return_units.get(out_name, None), subok=True)\n2135|                             for out, out_name in zip(outputs, self.outputs)])\n2136|        return outputs\n2137|\n2138|    @staticmethod\n2139|    def _prepare_output_single_model(output, broadcast_shape):\n2140|        if broadcast_shape is not None:\n2141|            if not broadcast_shape:\n2142|                return output.item()\n2143|            else:\n2144|                try:\n2145|                    return output.reshape(broadcast_shape)\n2146|                except ValueError:\n2147|                    try:\n2148|                        return output.item()\n2149|                    except ValueError:\n2150|                        return output\n2151|\n2152|        return output\n2153|\n2154|    def _prepare_outputs_single_model(self, outputs, broadcasted_shapes):\n2155|        outputs = list(outputs)\n2156|        for idx, output in enumerate(outputs):\n2157|            try:\n2158|                broadcast_shape = check_broadcast(*broadcasted_shapes[0])\n2159|            except (IndexError, TypeError):\n2160|                broadcast_shape = broadcasted_shapes[0][idx]\n2161|\n2162|            outputs[idx] = self._prepare_output_single_model(output, broadcast_shape)\n2163|\n2164|        return tuple(outputs)\n2165|\n2166|    def _prepare_outputs_model_set(self, outputs, broadcasted_shapes, model_set_axis):\n2167|        pivots = broadcasted_shapes[0]\n2168|        # If model_set_axis = False was passed then use\n2169|        # self._model_set_axis to format the output.\n2170|        if model_set_axis is None or model_set_axis is False:\n2171|            model_set_axis = self.model_set_axis\n2172|        outputs = list(outputs)\n2173|        for idx, output in enumerate(outputs):\n2174|            pivot = pivots[idx]\n2175|            if pivot < output.ndim and pivot != model_set_axis:\n2176|                outputs[idx] = np.rollaxis(output, pivot,\n2177|                                           model_set_axis)\n2178|        return tuple(outputs)\n2179|\n2180|    def prepare_outputs(self, broadcasted_shapes, *outputs, **kwargs):\n2181|        model_set_axis = kwargs.get('model_set_axis', None)\n2182|\n2183|        if len(self) == 1:\n2184|            return self._prepare_outputs_single_model(outputs, broadcasted_shapes)\n2185|        else:\n2186|            return self._prepare_outputs_model_set(outputs, broadcasted_shapes, model_set_axis)\n2187|\n2188|    def copy(self):\n2189|        \"\"\"\n2190|        Return a copy of this model.\n2191|\n2192|        Uses a deep copy so that all model attributes, including parameter\n2193|        values, are copied as well.\n2194|        \"\"\"\n2195|\n2196|        return copy.deepcopy(self)\n2197|\n2198|    def deepcopy(self):\n2199|        \"\"\"\n2200|        Return a deep copy of this model.\n2201|\n2202|        \"\"\"\n2203|\n2204|        return self.copy()\n2205|\n2206|    @sharedmethod\n2207|    def rename(self, name):\n2208|        \"\"\"\n2209|        Return a copy of this model with a new name.\n2210|        \"\"\"\n2211|        new_model = self.copy()\n2212|        new_model._name = name\n2213|        return new_model\n2214|\n2215|    def coerce_units(\n2216|        self,\n2217|        input_units=None,\n2218|        return_units=None,\n2219|        input_units_equivalencies=None,\n2220|        input_units_allow_dimensionless=False\n2221|    ):\n2222|        \"\"\"\n2223|        Attach units to this (unitless) model.\n2224|\n2225|        Parameters\n2226|        ----------\n2227|        input_units : dict or tuple, optional\n2228|            Input units to attach.  If dict, each key is the name of a model input,\n2229|            and the value is the unit to attach.  If tuple, the elements are units\n2230|            to attach in order corresponding to `Model.inputs`.\n2231|        return_units : dict or tuple, optional\n2232|            Output units to attach.  If dict, each key is the name of a model output,\n2233|            and the value is the unit to attach.  If tuple, the elements are units\n2234|            to attach in order corresponding to `Model.outputs`.\n2235|        input_units_equivalencies : dict, optional\n2236|            Default equivalencies to apply to input values.  If set, this should be a\n2237|            dictionary where each key is a string that corresponds to one of the\n2238|            model inputs.\n2239|        input_units_allow_dimensionless : bool or dict, optional\n2240|            Allow dimensionless input. If this is True, input values to evaluate will\n2241|            gain the units specified in input_units. If this is a dictionary then it\n2242|            should map input name to a bool to allow dimensionless numbers for that\n2243|            input.\n2244|\n2245|        Returns\n2246|        -------\n2247|        `CompoundModel`\n2248|            A `CompoundModel` composed of the current model plus\n2249|            `~astropy.modeling.mappings.UnitsMapping` model(s) that attach the units.\n2250|\n2251|        Raises\n2252|        ------\n2253|        ValueError\n2254|            If the current model already has units.\n2255|\n2256|        Examples\n2257|        --------\n2258|\n2259|        Wrapping a unitless model to require and convert units:\n2260|\n2261|        >>> from astropy.modeling.models import Polynomial1D\n2262|        >>> from astropy import units as u\n2263|        >>> poly = Polynomial1D(1, c0=1, c1=2)\n2264|        >>> model = poly.coerce_units((u.m,), (u.s,))\n2265|        >>> model(u.Quantity(10, u.m))  # doctest: +FLOAT_CMP\n2266|        <Quantity 21. s>\n2267|        >>> model(u.Quantity(1000, u.cm))  # doctest: +FLOAT_CMP\n2268|        <Quantity 21. s>\n2269|        >>> model(u.Quantity(10, u.cm))  # doctest: +FLOAT_CMP\n2270|        <Quantity 1.2 s>\n2271|\n2272|        Wrapping a unitless model but still permitting unitless input:\n2273|\n2274|        >>> from astropy.modeling.models import Polynomial1D\n2275|        >>> from astropy import units as u\n2276|        >>> poly = Polynomial1D(1, c0=1, c1=2)\n2277|        >>> model = poly.coerce_units((u.m,), (u.s,), input_units_allow_dimensionless=True)\n2278|        >>> model(u.Quantity(10, u.m))  # doctest: +FLOAT_CMP\n2279|        <Quantity 21. s>\n2280|        >>> model(10)  # doctest: +FLOAT_CMP\n2281|        <Quantity 21. s>\n2282|        \"\"\"\n2283|        from .mappings import UnitsMapping\n2284|\n2285|        result = self\n2286|\n2287|        if input_units is not None:\n2288|            if self.input_units is not None:\n2289|                model_units = self.input_units\n2290|            else:\n2291|                model_units = {}\n2292|\n2293|            for unit in [model_units.get(i) for i in self.inputs]:\n2294|                if unit is not None and unit != dimensionless_unscaled:\n2295|                    raise ValueError(\"Cannot specify input_units for model with existing input units\")\n2296|\n2297|            if isinstance(input_units, dict):\n2298|                if input_units.keys() != set(self.inputs):\n2299|                    message = (\n2300|                        f\"\"\"input_units keys ({\", \".join(input_units.keys())}) \"\"\"\n2301|                        f\"\"\"do not match model inputs ({\", \".join(self.inputs)})\"\"\"\n2302|                    )\n2303|                    raise ValueError(message)\n2304|                input_units = [input_units[i] for i in self.inputs]\n2305|\n2306|            if len(input_units) != self.n_inputs:\n2307|                message = (\n2308|                    \"input_units length does not match n_inputs: \"\n2309|                    f\"expected {self.n_inputs}, received {len(input_units)}\"\n2310|                )\n2311|                raise ValueError(message)\n2312|\n2313|            mapping = tuple((unit, model_units.get(i)) for i, unit in zip(self.inputs, input_units))\n2314|            input_mapping = UnitsMapping(\n2315|                mapping,\n2316|                input_units_equivalencies=input_units_equivalencies,\n2317|                input_units_allow_dimensionless=input_units_allow_dimensionless\n2318|            )\n2319|            input_mapping.inputs = self.inputs\n2320|            input_mapping.outputs = self.inputs\n2321|            result = input_mapping | result\n2322|\n2323|        if return_units is not None:\n2324|            if self.return_units is not None:\n2325|                model_units = self.return_units\n2326|            else:\n2327|                model_units = {}\n2328|\n2329|            for unit in [model_units.get(i) for i in self.outputs]:\n2330|                if unit is not None and unit != dimensionless_unscaled:\n2331|                    raise ValueError(\"Cannot specify return_units for model with existing output units\")\n2332|\n2333|            if isinstance(return_units, dict):\n2334|                if return_units.keys() != set(self.outputs):\n2335|                    message = (\n2336|                        f\"\"\"return_units keys ({\", \".join(return_units.keys())}) \"\"\"\n2337|                        f\"\"\"do not match model outputs ({\", \".join(self.outputs)})\"\"\"\n2338|                    )\n2339|                    raise ValueError(message)\n2340|                return_units = [return_units[i] for i in self.outputs]\n2341|\n2342|            if len(return_units) != self.n_outputs:\n2343|                message = (\n2344|                    \"return_units length does not match n_outputs: \"\n2345|                    f\"expected {self.n_outputs}, received {len(return_units)}\"\n2346|                )\n2347|                raise ValueError(message)\n2348|\n2349|            mapping = tuple((model_units.get(i), unit) for i, unit in zip(self.outputs, return_units))\n2350|            return_mapping = UnitsMapping(mapping)\n2351|            return_mapping.inputs = self.outputs\n2352|            return_mapping.outputs = self.outputs\n2353|            result = result | return_mapping\n2354|\n2355|        return result\n2356|\n2357|    @property\n2358|    def n_submodels(self):\n2359|        \"\"\"\n2360|        Return the number of components in a single model, which is\n2361|        obviously 1.\n2362|        \"\"\"\n2363|        return 1\n2364|\n2365|    def _initialize_constraints(self, kwargs):\n2366|        \"\"\"\n2367|        Pop parameter constraint values off the keyword arguments passed to\n2368|        `Model.__init__` and store them in private instance attributes.\n2369|        \"\"\"\n2370|\n2371|        # Pop any constraints off the keyword arguments\n2372|        for constraint in self.parameter_constraints:\n2373|            values = kwargs.pop(constraint, {})\n2374|            for ckey, cvalue in values.items():\n2375|                param = getattr(self, ckey)\n2376|                setattr(param, constraint, cvalue)\n2377|        self._mconstraints = {}\n2378|        for constraint in self.model_constraints:\n2379|            values = kwargs.pop(constraint, [])\n2380|            self._mconstraints[constraint] = values\n2381|\n2382|    def _initialize_parameters(self, args, kwargs):\n2383|        \"\"\"\n2384|        Initialize the _parameters array that stores raw parameter values for\n2385|        all parameter sets for use with vectorized fitting algorithms; on\n2386|        FittableModels the _param_name attributes actually just reference\n2387|        slices of this array.\n2388|        \"\"\"\n2389|        n_models = kwargs.pop('n_models', None)\n2390|\n2391|        if not (n_models is None or\n2392|                (isinstance(n_models, (int, np.integer)) and n_models >= 1)):\n2393|            raise ValueError(\n2394|                \"n_models must be either None (in which case it is \"\n2395|                \"determined from the model_set_axis of the parameter initial \"\n2396|                \"values) or it must be a positive integer \"\n2397|                \"(got {0!r})\".format(n_models))\n2398|\n2399|        model_set_axis = kwargs.pop('model_set_axis', None)\n2400|        if model_set_axis is None:\n2401|            if n_models is not None and n_models > 1:\n2402|                # Default to zero\n2403|                model_set_axis = 0\n2404|            else:\n2405|                # Otherwise disable\n2406|                model_set_axis = False\n2407|        else:\n2408|            if not (model_set_axis is False or\n2409|                    np.issubdtype(type(model_set_axis), np.integer)):\n2410|                raise ValueError(\n2411|                    \"model_set_axis must be either False or an integer \"\n2412|                    \"specifying the parameter array axis to map to each \"\n2413|                    \"model in a set of models (got {0!r}).\".format(\n2414|                        model_set_axis))\n2415|\n2416|        # Process positional arguments by matching them up with the\n2417|        # corresponding parameters in self.param_names--if any also appear as\n2418|        # keyword arguments this presents a conflict\n2419|        params = set()\n2420|        if len(args) > len(self.param_names):\n2421|            raise TypeError(\n2422|                \"{0}.__init__() takes at most {1} positional arguments ({2} \"\n2423|                \"given)\".format(self.__class__.__name__, len(self.param_names),\n2424|                                len(args)))\n2425|\n2426|        self._model_set_axis = model_set_axis\n2427|        self._param_metrics = defaultdict(dict)\n2428|\n2429|        for idx, arg in enumerate(args):\n2430|            if arg is None:\n2431|                # A value of None implies using the default value, if exists\n2432|                continue\n2433|            # We use quantity_asanyarray here instead of np.asanyarray because\n2434|            # if any of the arguments are quantities, we need to return a\n2435|            # Quantity object not a plain Numpy array.\n2436|            param_name = self.param_names[idx]\n2437|            params.add(param_name)\n2438|            if not isinstance(arg, Parameter):\n2439|                value = quantity_asanyarray(arg, dtype=float)\n2440|            else:\n2441|                value = arg\n2442|            self._initialize_parameter_value(param_name, value)\n2443|\n2444|        # At this point the only remaining keyword arguments should be\n2445|        # parameter names; any others are in error.\n2446|        for param_name in self.param_names:\n2447|            if param_name in kwargs:\n2448|                if param_name in params:\n2449|                    raise TypeError(\n2450|                        \"{0}.__init__() got multiple values for parameter \"\n2451|                        \"{1!r}\".format(self.__class__.__name__, param_name))\n2452|                value = kwargs.pop(param_name)\n2453|                if value is None:\n2454|                    continue\n2455|                # We use quantity_asanyarray here instead of np.asanyarray\n2456|                # because if any of the arguments are quantities, we need\n2457|                # to return a Quantity object not a plain Numpy array.\n2458|                value = quantity_asanyarray(value, dtype=float)\n2459|                params.add(param_name)\n2460|                self._initialize_parameter_value(param_name, value)\n2461|        # Now deal with case where param_name is not supplied by args or kwargs\n2462|        for param_name in self.param_names:\n2463|            if param_name not in params:\n2464|                self._initialize_parameter_value(param_name, None)\n2465|\n2466|        if kwargs:\n2467|            # If any keyword arguments were left over at this point they are\n2468|            # invalid--the base class should only be passed the parameter\n2469|            # values, constraints, and param_dim\n2470|            for kwarg in kwargs:\n2471|                # Just raise an error on the first unrecognized argument\n2472|                raise TypeError(\n2473|                    '{0}.__init__() got an unrecognized parameter '\n2474|                    '{1!r}'.format(self.__class__.__name__, kwarg))\n2475|\n2476|        # Determine the number of model sets: If the model_set_axis is\n2477|        # None then there is just one parameter set; otherwise it is determined\n2478|        # by the size of that axis on the first parameter--if the other\n2479|        # parameters don't have the right number of axes or the sizes of their\n2480|        # model_set_axis don't match an error is raised\n2481|        if model_set_axis is not False and n_models != 1 and params:\n2482|            max_ndim = 0\n2483|            if model_set_axis < 0:\n2484|                min_ndim = abs(model_set_axis)\n2485|            else:\n2486|                min_ndim = model_set_axis + 1\n2487|\n2488|            for name in self.param_names:\n2489|                value = getattr(self, name)\n2490|                param_ndim = np.ndim(value)\n2491|                if param_ndim < min_ndim:\n2492|                    raise InputParameterError(\n2493|                        \"All parameter values must be arrays of dimension \"\n2494|                        \"at least {0} for model_set_axis={1} (the value \"\n2495|                        \"given for {2!r} is only {3}-dimensional)\".format(\n2496|                            min_ndim, model_set_axis, name, param_ndim))\n2497|\n2498|                max_ndim = max(max_ndim, param_ndim)\n2499|\n2500|                if n_models is None:\n2501|                    # Use the dimensions of the first parameter to determine\n2502|                    # the number of model sets\n2503|                    n_models = value.shape[model_set_axis]\n2504|                elif value.shape[model_set_axis] != n_models:\n2505|                    raise InputParameterError(\n2506|                        \"Inconsistent dimensions for parameter {0!r} for \"\n2507|                        \"{1} model sets.  The length of axis {2} must be the \"\n2508|                        \"same for all input parameter values\".format(\n2509|                            name, n_models, model_set_axis))\n2510|\n2511|            self._check_param_broadcast(max_ndim)\n2512|        else:\n2513|            if n_models is None:\n2514|                n_models = 1\n2515|\n2516|            self._check_param_broadcast(None)\n2517|\n2518|        self._n_models = n_models\n2519|        # now validate parameters\n2520|        for name in params:\n2521|            param = getattr(self, name)\n2522|            if param._validator is not None:\n2523|                param._validator(self, param.value)\n2524|\n2525|    def _initialize_parameter_value(self, param_name, value):\n2526|        \"\"\"Mostly deals with consistency checks and determining unit issues.\"\"\"\n2527|        if isinstance(value, Parameter):\n2528|            self.__dict__[param_name] = value\n2529|            return\n2530|        param = getattr(self, param_name)\n2531|        # Use default if value is not provided\n2532|        if value is None:\n2533|            default = param.default\n2534|            if default is None:\n2535|                # No value was supplied for the parameter and the\n2536|                # parameter does not have a default, therefore the model\n2537|                # is underspecified\n2538|                raise TypeError(\"{0}.__init__() requires a value for parameter \"\n2539|                                \"{1!r}\".format(self.__class__.__name__, param_name))\n2540|            value = default\n2541|            unit = param.unit\n2542|        else:\n2543|            if isinstance(value, Quantity):\n2544|                unit = value.unit\n2545|                value = value.value\n2546|            else:\n2547|                unit = None\n2548|        if unit is None and param.unit is not None:\n2549|            raise InputParameterError(\n2550|                \"{0}.__init__() requires a Quantity for parameter \"\n2551|                \"{1!r}\".format(self.__class__.__name__, param_name))\n2552|        param._unit = unit\n2553|        param.internal_unit = None\n2554|        if param._setter is not None:\n2555|            if unit is not None:\n2556|                _val = param._setter(value * unit)\n2557|            else:\n2558|                _val = param._setter(value)\n2559|            if isinstance(_val, Quantity):\n2560|                param.internal_unit = _val.unit\n2561|                param._internal_value = np.array(_val.value)\n2562|            else:\n2563|                param.internal_unit = None\n2564|                param._internal_value = np.array(_val)\n2565|        else:\n2566|            param._value = np.array(value)\n2567|\n2568|    def _initialize_slices(self):\n2569|\n2570|        param_metrics = self._param_metrics\n2571|        total_size = 0\n2572|\n2573|        for name in self.param_names:\n2574|            param = getattr(self, name)\n2575|            value = param.value\n2576|            param_size = np.size(value)\n2577|            param_shape = np.shape(value)\n2578|            param_slice = slice(total_size, total_size + param_size)\n2579|            param_metrics[name]['slice'] = param_slice\n2580|            param_metrics[name]['shape'] = param_shape\n2581|            param_metrics[name]['size'] = param_size\n2582|            total_size += param_size\n2583|        self._parameters = np.empty(total_size, dtype=np.float64)\n2584|\n2585|    def _parameters_to_array(self):\n2586|        # Now set the parameter values (this will also fill\n2587|        # self._parameters)\n2588|        param_metrics = self._param_metrics\n2589|        for name in self.param_names:\n2590|            param = getattr(self, name)\n2591|            value = param.value\n2592|            if not isinstance(value, np.ndarray):\n2593|                value = np.array([value])\n2594|            self._parameters[param_metrics[name]['slice']] = value.ravel()\n2595|\n2596|        # Finally validate all the parameters; we do this last so that\n2597|        # validators that depend on one of the other parameters' values will\n2598|        # work\n2599|\n2600|    def _array_to_parameters(self):\n2601|        param_metrics = self._param_metrics\n2602|        for name in self.param_names:\n2603|            param = getattr(self, name)\n2604|            value = self._parameters[param_metrics[name]['slice']]\n2605|            value.shape = param_metrics[name]['shape']\n2606|            param.value = value\n2607|\n2608|    def _check_param_broadcast(self, max_ndim):\n2609|        \"\"\"\n2610|        This subroutine checks that all parameter arrays can be broadcast\n2611|        against each other, and determines the shapes parameters must have in\n2612|        order to broadcast correctly.\n2613|\n2614|        If model_set_axis is None this merely checks that the parameters\n2615|        broadcast and returns an empty dict if so.  This mode is only used for\n2616|        single model sets.\n2617|        \"\"\"\n2618|        all_shapes = []\n2619|        model_set_axis = self._model_set_axis\n2620|\n2621|        for name in self.param_names:\n2622|            param = getattr(self, name)\n2623|            value = param.value\n2624|            param_shape = np.shape(value)\n2625|            param_ndim = len(param_shape)\n2626|            if max_ndim is not None and param_ndim < max_ndim:\n2627|                # All arrays have the same number of dimensions up to the\n2628|                # model_set_axis dimension, but after that they may have a\n2629|                # different number of trailing axes.  The number of trailing\n2630|                # axes must be extended for mutual compatibility.  For example\n2631|                # if max_ndim = 3 and model_set_axis = 0, an array with the\n2632|                # shape (2, 2) must be extended to (2, 1, 2).  However, an\n2633|                # array with shape (2,) is extended to (2, 1).\n2634|                new_axes = (1,) * (max_ndim - param_ndim)\n2635|\n2636|                if model_set_axis < 0:\n2637|                    # Just need to prepend axes to make up the difference\n2638|                    broadcast_shape = new_axes + param_shape\n2639|                else:\n2640|                    broadcast_shape = (param_shape[:model_set_axis + 1] +\n2641|                                       new_axes +\n2642|                                       param_shape[model_set_axis + 1:])\n2643|                self._param_metrics[name]['broadcast_shape'] = broadcast_shape\n2644|                all_shapes.append(broadcast_shape)\n2645|            else:\n2646|                all_shapes.append(param_shape)\n2647|\n2648|        # Now check mutual broadcastability of all shapes\n2649|        try:\n2650|            check_broadcast(*all_shapes)\n2651|        except IncompatibleShapeError as exc:\n2652|            shape_a, shape_a_idx, shape_b, shape_b_idx = exc.args\n2653|            param_a = self.param_names[shape_a_idx]\n2654|            param_b = self.param_names[shape_b_idx]\n2655|\n2656|            raise InputParameterError(\n2657|                \"Parameter {0!r} of shape {1!r} cannot be broadcast with \"\n2658|                \"parameter {2!r} of shape {3!r}.  All parameter arrays \"\n2659|                \"must have shapes that are mutually compatible according \"\n2660|                \"to the broadcasting rules.\".format(param_a, shape_a,\n2661|                                                    param_b, shape_b))\n2662|\n2663|    def _param_sets(self, raw=False, units=False):\n2664|        \"\"\"\n2665|        Implementation of the Model.param_sets property.\n2666|\n2667|        This internal implementation has a ``raw`` argument which controls\n2668|        whether or not to return the raw parameter values (i.e. the values that\n2669|        are actually stored in the ._parameters array, as opposed to the values\n2670|        displayed to users.  In most cases these are one in the same but there\n2671|        are currently a few exceptions.\n2672|\n2673|        Note: This is notably an overcomplicated device and may be removed\n2674|        entirely in the near future.\n2675|        \"\"\"\n2676|\n2677|        values = []\n2678|        shapes = []\n2679|        for name in self.param_names:\n2680|            param = getattr(self, name)\n2681|\n2682|            if raw and param._setter:\n2683|                value = param._internal_value\n2684|            else:\n2685|                value = param.value\n2686|\n2687|            broadcast_shape = self._param_metrics[name].get('broadcast_shape')\n2688|            if broadcast_shape is not None:\n2689|                value = value.reshape(broadcast_shape)\n2690|\n2691|            shapes.append(np.shape(value))\n2692|\n2693|            if len(self) == 1:\n2694|                # Add a single param set axis to the parameter's value (thus\n2695|                # converting scalars to shape (1,) array values) for\n2696|                # consistency\n2697|                value = np.array([value])\n2698|\n2699|            if units:\n2700|                if raw and param.internal_unit is not None:\n2701|                    unit = param.internal_unit\n2702|                else:\n2703|                    unit = param.unit\n2704|                if unit is not None:\n2705|                    value = Quantity(value, unit)\n2706|\n2707|            values.append(value)\n2708|\n2709|        if len(set(shapes)) != 1 or units:\n2710|            # If the parameters are not all the same shape, converting to an\n2711|            # array is going to produce an object array\n2712|            # However the way Numpy creates object arrays is tricky in that it\n2713|            # will recurse into array objects in the list and break them up\n2714|            # into separate objects.  Doing things this way ensures a 1-D\n2715|            # object array the elements of which are the individual parameter\n2716|            # arrays.  There's not much reason to do this over returning a list\n2717|            # except for consistency\n2718|            psets = np.empty(len(values), dtype=object)\n2719|            psets[:] = values\n2720|            return psets\n2721|\n2722|        return np.array(values)\n2723|\n2724|    def _format_repr(self, args=[], kwargs={}, defaults={}):\n2725|        \"\"\"\n2726|        Internal implementation of ``__repr__``.\n2727|\n2728|        This is separated out for ease of use by subclasses that wish to\n2729|        override the default ``__repr__`` while keeping the same basic\n2730|        formatting.\n2731|        \"\"\"\n2732|\n2733|        parts = [repr(a) for a in args]\n2734|\n2735|        parts.extend(\n2736|            f\"{name}={param_repr_oneline(getattr(self, name))}\"\n2737|            for name in self.param_names)\n2738|\n2739|        if self.name is not None:\n2740|            parts.append(f'name={self.name!r}')\n2741|\n2742|        for kwarg, value in kwargs.items():\n2743|            if kwarg in defaults and defaults[kwarg] == value:\n2744|                continue\n2745|            parts.append(f'{kwarg}={value!r}')\n2746|\n2747|        if len(self) > 1:\n2748|            parts.append(f\"n_models={len(self)}\")\n2749|\n2750|        return f\"<{self.__class__.__name__}({', '.join(parts)})>\"\n2751|\n2752|    def _format_str(self, keywords=[], defaults={}):\n2753|        \"\"\"\n2754|        Internal implementation of ``__str__``.\n2755|\n2756|        This is separated out for ease of use by subclasses that wish to\n2757|        override the default ``__str__`` while keeping the same basic\n2758|        formatting.\n2759|        \"\"\"\n2760|\n2761|        default_keywords = [\n2762|            ('Model', self.__class__.__name__),\n2763|            ('Name', self.name),\n2764|            ('Inputs', self.inputs),\n2765|            ('Outputs', self.outputs),\n2766|            ('Model set size', len(self))\n2767|        ]\n2768|\n2769|        parts = [f'{keyword}: {value}'\n2770|                 for keyword, value in default_keywords\n2771|                 if value is not None]\n2772|\n2773|        for keyword, value in keywords:\n2774|            if keyword.lower() in defaults and defaults[keyword.lower()] == value:\n2775|                continue\n2776|            parts.append(f'{keyword}: {value}')\n2777|        parts.append('Parameters:')\n2778|\n2779|        if len(self) == 1:\n2780|            columns = [[getattr(self, name).value]\n2781|                       for name in self.param_names]\n2782|        else:\n2783|            columns = [getattr(self, name).value\n2784|                       for name in self.param_names]\n2785|\n2786|        if columns:\n2787|            param_table = Table(columns, names=self.param_names)\n2788|            # Set units on the columns\n2789|            for name in self.param_names:\n2790|                param_table[name].unit = getattr(self, name).unit\n2791|            parts.append(indent(str(param_table), width=4))\n2792|\n2793|        return '\\n'.join(parts)\n2794|\n2795|\n2796|class FittableModel(Model):\n2797|    \"\"\"\n2798|    Base class for models that can be fitted using the built-in fitting\n2799|    algorithms.\n2800|    \"\"\"\n2801|\n2802|    linear = False\n2803|    # derivative with respect to parameters\n...\n2884|    '&': _join_operator\n2885|}\n2886|\n2887|SPECIAL_OPERATORS = _SpecialOperatorsDict()\n2888|\n2889|\n2890|def _add_special_operator(sop_name, sop):\n2891|    return SPECIAL_OPERATORS.add(sop_name, sop)\n2892|\n2893|\n2894|class CompoundModel(Model):\n2895|    '''\n2896|    Base class for compound models.\n2897|\n2898|    While it can be used directly, the recommended way\n2899|    to combine models is through the model operators.\n2900|    '''\n2901|\n2902|    def __init__(self, op, left, right, name=None):\n2903|        self.__dict__['_param_names'] = None\n2904|        self._n_submodels = None\n2905|        self.op = op\n2906|        self.left = left\n2907|        self.right = right\n2908|        self._bounding_box = None\n2909|        self._user_bounding_box = None\n2910|        self._leaflist = None\n2911|        self._tdict = None\n2912|        self._parameters = None\n2913|        self._parameters_ = None\n2914|        self._param_metrics = None\n2915|\n2916|        if op != 'fix_inputs' and len(left) != len(right):\n2917|            raise ValueError(\n2918|                'Both operands must have equal values for n_models')\n2919|        self._n_models = len(left)\n2920|\n2921|        if op != 'fix_inputs' and ((left.model_set_axis != right.model_set_axis)\n2922|                                   or left.model_set_axis):  # not False and not 0\n2923|            raise ValueError(\"model_set_axis must be False or 0 and consistent for operands\")\n2924|        self._model_set_axis = left.model_set_axis\n2925|\n2926|        if op in ['+', '-', '*', '/', '**'] or op in SPECIAL_OPERATORS:\n2927|            if (left.n_inputs != right.n_inputs) or \\\n2928|               (left.n_outputs != right.n_outputs):\n2929|                raise ModelDefinitionError(\n2930|                    'Both operands must match numbers of inputs and outputs')\n2931|            self.n_inputs = left.n_inputs\n2932|            self.n_outputs = left.n_outputs\n2933|            self.inputs = left.inputs\n2934|            self.outputs = left.outputs\n2935|        elif op == '&':\n2936|            self.n_inputs = left.n_inputs + right.n_inputs\n2937|            self.n_outputs = left.n_outputs + right.n_outputs\n2938|            self.inputs = combine_labels(left.inputs, right.inputs)\n2939|            self.outputs = combine_labels(left.outputs, right.outputs)\n2940|        elif op == '|':\n2941|            if left.n_outputs != right.n_inputs:\n2942|                raise ModelDefinitionError(\n2943|                    \"Unsupported operands for |: {0} (n_inputs={1}, \"\n2944|                    \"n_outputs={2}) and {3} (n_inputs={4}, n_outputs={5}); \"\n2945|                    \"n_outputs for the left-hand model must match n_inputs \"\n2946|                    \"for the right-hand model.\".format(\n2947|                        left.name, left.n_inputs, left.n_outputs, right.name,\n2948|                        right.n_inputs, right.n_outputs))\n2949|\n2950|            self.n_inputs = left.n_inputs\n2951|            self.n_outputs = right.n_outputs\n2952|            self.inputs = left.inputs\n2953|            self.outputs = right.outputs\n2954|        elif op == 'fix_inputs':\n2955|            if not isinstance(left, Model):\n2956|                raise ValueError('First argument to \"fix_inputs\" must be an instance of an astropy Model.')\n2957|            if not isinstance(right, dict):\n2958|                raise ValueError('Expected a dictionary for second argument of \"fix_inputs\".')\n2959|\n2960|            # Dict keys must match either possible indices\n2961|            # for model on left side, or names for inputs.\n2962|            self.n_inputs = left.n_inputs - len(right)\n2963|            # Assign directly to the private attribute (instead of using the setter)\n2964|            # to avoid asserting the new number of outputs matches the old one.\n2965|            self._outputs = left.outputs\n2966|            self.n_outputs = left.n_outputs\n2967|            newinputs = list(left.inputs)\n2968|            keys = right.keys()\n2969|            input_ind = []\n2970|            for key in keys:\n2971|                if np.issubdtype(type(key), np.integer):\n2972|                    if key >= left.n_inputs or key < 0:\n2973|                        raise ValueError(\n2974|                            'Substitution key integer value '\n2975|                            'not among possible input choices.')\n2976|                    if key in input_ind:\n2977|                        raise ValueError(\"Duplicate specification of \"\n2978|                                         \"same input (index/name).\")\n2979|                    input_ind.append(key)\n2980|                elif isinstance(key, str):\n2981|                    if key not in left.inputs:\n2982|                        raise ValueError(\n2983|                            'Substitution key string not among possible '\n2984|                            'input choices.')\n2985|                    # Check to see it doesn't match positional\n2986|                    # specification.\n2987|                    ind = left.inputs.index(key)\n2988|                    if ind in input_ind:\n2989|                        raise ValueError(\"Duplicate specification of \"\n2990|                                         \"same input (index/name).\")\n2991|                    input_ind.append(ind)\n2992|            # Remove substituted inputs\n2993|            input_ind.sort()\n2994|            input_ind.reverse()\n2995|            for ind in input_ind:\n2996|                del newinputs[ind]\n2997|            self.inputs = tuple(newinputs)\n2998|            # Now check to see if the input model has bounding_box defined.\n2999|            # If so, remove the appropriate dimensions and set it for this\n3000|            # instance.\n3001|            try:\n3002|                self.bounding_box = \\\n3003|                    self.left.bounding_box.fix_inputs(self, right)\n3004|            except NotImplementedError:\n3005|                pass\n3006|\n3007|        else:\n3008|            raise ModelDefinitionError('Illegal operator: ', self.op)\n3009|        self.name = name\n3010|        self._fittable = None\n3011|        self.fit_deriv = None\n3012|        self.col_fit_deriv = None\n3013|        if op in ('|', '+', '-'):\n3014|            self.linear = left.linear and right.linear\n3015|        else:\n3016|            self.linear = False\n3017|        self.eqcons = []\n3018|        self.ineqcons = []\n3019|        self.n_left_params = len(self.left.parameters)\n3020|        self._map_parameters()\n3021|\n3022|    def _get_left_inputs_from_args(self, args):\n3023|        return args[:self.left.n_inputs]\n3024|\n3025|    def _get_right_inputs_from_args(self, args):\n3026|        op = self.op\n3027|        if op == '&':\n3028|            # Args expected to look like (*left inputs, *right inputs, *left params, *right params)\n3029|            return args[self.left.n_inputs: self.left.n_inputs + self.right.n_inputs]\n3030|        elif op == '|' or  op == 'fix_inputs':\n3031|            return None\n3032|        else:\n3033|            return args[:self.left.n_inputs]\n3034|\n3035|    def _get_left_params_from_args(self, args):\n3036|        op = self.op\n3037|        if op == '&':\n3038|            # Args expected to look like (*left inputs, *right inputs, *left params, *right params)\n3039|            n_inputs = self.left.n_inputs + self.right.n_inputs\n3040|            return args[n_inputs: n_inputs + self.n_left_params]\n3041|        else:\n3042|            return args[self.left.n_inputs: self.left.n_inputs + self.n_left_params]\n3043|\n3044|    def _get_right_params_from_args(self, args):\n3045|        op = self.op\n3046|        if op == 'fix_inputs':\n3047|            return None\n3048|        if op == '&':\n3049|            # Args expected to look like (*left inputs, *right inputs, *left params, *right params)\n3050|            return args[self.left.n_inputs + self.right.n_inputs + self.n_left_params:]\n3051|        else:\n3052|            return args[self.left.n_inputs + self.n_left_params:]\n3053|\n3054|    def _get_kwarg_model_parameters_as_positional(self, args, kwargs):\n3055|        # could do it with inserts but rebuilding seems like simpilist way\n3056|\n3057|        #TODO: Check if any param names are in kwargs maybe as an intersection of sets?\n3058|        if self.op == \"&\":\n3059|            new_args = list(args[:self.left.n_inputs + self.right.n_inputs])\n3060|            args_pos = self.left.n_inputs + self.right.n_inputs\n3061|        else:\n3062|            new_args = list(args[:self.left.n_inputs])\n3063|            args_pos = self.left.n_inputs\n3064|\n3065|        for param_name in self.param_names:\n3066|            kw_value = kwargs.pop(param_name, None)\n3067|            if kw_value is not None:\n3068|                value = kw_value\n3069|            else:\n3070|                try:\n3071|                    value = args[args_pos]\n3072|                except IndexError:\n3073|                    raise IndexError(\"Missing parameter or input\")\n3074|\n3075|                args_pos += 1\n3076|            new_args.append(value)\n3077|\n3078|        return new_args, kwargs\n3079|\n3080|    def _apply_operators_to_value_lists(self, leftval, rightval, **kw):\n3081|        op = self.op\n3082|        if op == '+':\n3083|            return binary_operation(operator.add, leftval, rightval)\n3084|        elif op == '-':\n3085|            return binary_operation(operator.sub, leftval, rightval)\n3086|        elif op == '*':\n3087|            return binary_operation(operator.mul, leftval, rightval)\n3088|        elif op == '/':\n3089|            return binary_operation(operator.truediv, leftval, rightval)\n3090|        elif op == '**':\n3091|            return binary_operation(operator.pow, leftval, rightval)\n3092|        elif op == '&':\n3093|            if not isinstance(leftval, tuple):\n3094|                leftval = (leftval,)\n3095|            if not isinstance(rightval, tuple):\n3096|                rightval = (rightval,)\n3097|            return leftval + rightval\n3098|        elif op in SPECIAL_OPERATORS:\n3099|            return binary_operation(SPECIAL_OPERATORS[op], leftval, rightval)\n3100|        else:\n3101|            raise ModelDefinitionError('Unrecognized operator {op}')\n3102|\n3103|    def evaluate(self, *args, **kw):\n3104|        op = self.op\n3105|        args, kw = self._get_kwarg_model_parameters_as_positional(args, kw)\n3106|        left_inputs = self._get_left_inputs_from_args(args)\n3107|        left_params = self._get_left_params_from_args(args)\n3108|\n3109|        if op == 'fix_inputs':\n3110|            pos_index = dict(zip(self.left.inputs, range(self.left.n_inputs)))\n3111|            fixed_inputs = {\n3112|                key if np.issubdtype(type(key), np.integer) else pos_index[key]: value\n3113|                for key, value in self.right.items()\n3114|            }\n3115|            left_inputs = [\n3116|                fixed_inputs[ind] if ind in fixed_inputs.keys() else inp\n3117|                for ind, inp in enumerate(left_inputs)\n3118|            ]\n3119|\n3120|        leftval = self.left.evaluate(*itertools.chain(left_inputs, left_params))\n3121|\n3122|        if op == 'fix_inputs':\n3123|            return leftval\n3124|\n3125|        right_inputs = self._get_right_inputs_from_args(args)\n3126|        right_params = self._get_right_params_from_args(args)\n3127|\n3128|        if op == \"|\":\n3129|            if isinstance(leftval, tuple):\n3130|                return self.right.evaluate(*itertools.chain(leftval, right_params))\n3131|            else:\n3132|                return self.right.evaluate(leftval, *right_params)\n3133|        else:\n3134|            rightval = self.right.evaluate(*itertools.chain(right_inputs, right_params))\n3135|\n3136|        return self._apply_operators_to_value_lists(leftval, rightval, **kw)\n3137|\n3138|    @property\n3139|    def n_submodels(self):\n3140|        if self._leaflist is None:\n3141|            self._make_leaflist()\n3142|        return len(self._leaflist)\n3143|\n3144|    @property\n3145|    def submodel_names(self):\n3146|        \"\"\" Return the names of submodels in a ``CompoundModel``.\"\"\"\n3147|        if self._leaflist is None:\n3148|            self._make_leaflist()\n3149|        names = [item.name for item in self._leaflist]\n3150|        nonecount = 0\n3151|        newnames = []\n3152|        for item in names:\n3153|            if item is None:\n3154|                newnames.append(f'None_{nonecount}')\n3155|                nonecount += 1\n3156|            else:\n3157|                newnames.append(item)\n3158|        return tuple(newnames)\n3159|\n3160|    def both_inverses_exist(self):\n3161|        '''\n3162|        if both members of this compound model have inverses return True\n3163|        '''\n3164|        warnings.warn(\n3165|            \"CompoundModel.both_inverses_exist is deprecated. \"\n3166|            \"Use has_inverse instead.\",\n3167|            AstropyDeprecationWarning\n3168|        )\n3169|\n3170|        try:\n3171|            linv = self.left.inverse\n3172|            rinv = self.right.inverse\n3173|        except NotImplementedError:\n3174|            return False\n3175|\n3176|        return True\n3177|\n3178|    def _pre_evaluate(self, *args, **kwargs):\n3179|        \"\"\"\n3180|        CompoundModel specific input setup that needs to occur prior to\n3181|            model evaluation.\n3182|\n3183|        Note\n3184|        ----\n3185|            All of the _pre_evaluate for each component model will be\n3186|            performed at the time that the individual model is evaluated.\n3187|        \"\"\"\n3188|\n3189|        # If equivalencies are provided, necessary to map parameters and pass\n3190|        # the leaflist as a keyword input for use by model evaluation so that\n3191|        # the compound model input names can be matched to the model input\n3192|        # names.\n3193|        if 'equivalencies' in kwargs:\n3194|            # Restructure to be useful for the individual model lookup\n3195|            kwargs['inputs_map'] = [(value[0], (value[1], key)) for\n3196|                                    key, value in self.inputs_map().items()]\n3197|\n3198|        # Setup actual model evaluation method\n3199|        def evaluate(_inputs):\n3200|            return self._evaluate(*_inputs, **kwargs)\n3201|\n3202|        return evaluate, args, None, kwargs\n3203|\n3204|    @property\n3205|    def _argnames(self):\n3206|        \"\"\"No inputs should be used to determine input_shape when handling compound models\"\"\"\n3207|        return ()\n3208|\n3209|    def _post_evaluate(self, inputs, outputs, broadcasted_shapes, with_bbox, **kwargs):\n3210|        \"\"\"\n3211|        CompoundModel specific post evaluation processing of outputs\n3212|\n3213|        Note\n3214|        ----\n3215|            All of the _post_evaluate for each component model will be\n3216|            performed at the time that the individual model is evaluated.\n3217|        \"\"\"\n3218|        if self.get_bounding_box(with_bbox) is not None and self.n_outputs == 1:\n3219|            return outputs[0]\n3220|        return outputs\n3221|\n3222|    def _evaluate(self, *args, **kw):\n3223|        op = self.op\n3224|        if op != 'fix_inputs':\n3225|            if op != '&':\n3226|                leftval = self.left(*args, **kw)\n3227|                if op != '|':\n3228|                    rightval = self.right(*args, **kw)\n3229|                else:\n3230|                    rightval = None\n3231|\n3232|            else:\n3233|                leftval = self.left(*(args[:self.left.n_inputs]), **kw)\n3234|                rightval = self.right(*(args[self.left.n_inputs:]), **kw)\n3235|\n3236|            if op != \"|\":\n3237|                return self._apply_operators_to_value_lists(leftval, rightval, **kw)\n3238|\n3239|            elif op == '|':\n3240|                if isinstance(leftval, tuple):\n3241|                    return self.right(*leftval, **kw)\n3242|                else:\n3243|                    return self.right(leftval, **kw)\n3244|\n3245|        else:\n3246|            subs = self.right\n3247|            newargs = list(args)\n3248|            subinds = []\n3249|            subvals = []\n3250|            for key in subs.keys():\n3251|                if np.issubdtype(type(key), np.integer):\n3252|                    subinds.append(key)\n3253|                elif isinstance(key, str):\n3254|                    ind = self.left.inputs.index(key)\n3255|                    subinds.append(ind)\n3256|                subvals.append(subs[key])\n3257|            # Turn inputs specified in kw into positional indices.\n3258|            # Names for compound inputs do not propagate to sub models.\n3259|            kwind = []\n3260|            kwval = []\n3261|            for kwkey in list(kw.keys()):\n3262|                if kwkey in self.inputs:\n3263|                    ind = self.inputs.index(kwkey)\n3264|                    if ind < len(args):\n3265|                        raise ValueError(\"Keyword argument duplicates \"\n3266|                                         \"positional value supplied.\")\n3267|                    kwind.append(ind)\n3268|                    kwval.append(kw[kwkey])\n3269|                    del kw[kwkey]\n3270|            # Build new argument list\n3271|            # Append keyword specified args first\n3272|            if kwind:\n3273|                kwargs = list(zip(kwind, kwval))\n3274|                kwargs.sort()\n3275|                kwindsorted, kwvalsorted = list(zip(*kwargs))\n3276|                newargs = newargs + list(kwvalsorted)\n3277|            if subinds:\n3278|                subargs = list(zip(subinds, subvals))\n3279|                subargs.sort()\n3280|                # subindsorted, subvalsorted = list(zip(*subargs))\n3281|                # The substitutions must be inserted in order\n3282|                for ind, val in subargs:\n3283|                    newargs.insert(ind, val)\n3284|            return self.left(*newargs, **kw)\n3285|\n3286|    @property\n3287|    def param_names(self):\n3288|        \"\"\" An ordered list of parameter names.\"\"\"\n3289|        return self._param_names\n3290|\n3291|    def _make_leaflist(self):\n3292|        tdict = {}\n3293|        leaflist = []\n3294|        make_subtree_dict(self, '', tdict, leaflist)\n3295|        self._leaflist = leaflist\n3296|        self._tdict = tdict\n3297|\n3298|    def __getattr__(self, name):\n3299|        \"\"\"\n3300|        If someone accesses an attribute not already defined, map the\n3301|        parameters, and then see if the requested attribute is one of\n3302|        the parameters\n3303|        \"\"\"\n3304|        # The following test is needed to avoid infinite recursion\n3305|        # caused by deepcopy. There may be other such cases discovered.\n3306|        if name == '__setstate__':\n3307|            raise AttributeError\n3308|        if name in self._param_names:\n3309|            return self.__dict__[name]\n3310|        else:\n3311|            raise AttributeError(f'Attribute \"{name}\" not found')\n3312|\n3313|    def __getitem__(self, index):\n3314|        if self._leaflist is None:\n3315|            self._make_leaflist()\n3316|        leaflist = self._leaflist\n3317|        tdict = self._tdict\n3318|        if isinstance(index, slice):\n3319|            if index.step:\n3320|                raise ValueError('Steps in slices not supported '\n3321|                                 'for compound models')\n3322|            if index.start is not None:\n3323|                if isinstance(index.start, str):\n3324|                    start = self._str_index_to_int(index.start)\n3325|                else:\n3326|                    start = index.start\n3327|            else:\n3328|                start = 0\n3329|            if index.stop is not None:\n3330|                if isinstance(index.stop, str):\n3331|                    stop = self._str_index_to_int(index.stop)\n3332|                else:\n3333|                    stop = index.stop - 1\n3334|            else:\n3335|                stop = len(leaflist) - 1\n3336|            if index.stop == 0:\n3337|                raise ValueError(\"Slice endpoint cannot be 0\")\n3338|            if start < 0:\n3339|                start = len(leaflist) + start\n3340|            if stop < 0:\n3341|                stop = len(leaflist) + stop\n3342|            # now search for matching node:\n3343|            if stop == start:  # only single value, get leaf instead in code below\n3344|                index = start\n3345|            else:\n3346|                for key in tdict:\n3347|                    node, leftind, rightind = tdict[key]\n3348|                    if leftind == start and rightind == stop:\n3349|                        return node\n3350|                raise IndexError(\"No appropriate subtree matches slice\")\n3351|        if isinstance(index, type(0)):\n3352|            return leaflist[index]\n3353|        elif isinstance(index, type('')):\n3354|            return leaflist[self._str_index_to_int(index)]\n3355|        else:\n3356|            raise TypeError('index must be integer, slice, or model name string')\n3357|\n3358|    def _str_index_to_int(self, str_index):\n3359|        # Search through leaflist for item with that name\n3360|        found = []\n3361|        for nleaf, leaf in enumerate(self._leaflist):\n3362|            if getattr(leaf, 'name', None) == str_index:\n3363|                found.append(nleaf)\n3364|        if len(found) == 0:\n3365|            raise IndexError(f\"No component with name '{str_index}' found\")\n3366|        if len(found) > 1:\n3367|            raise IndexError(\"Multiple components found using '{}' as name\\n\"\n3368|                             \"at indices {}\".format(str_index, found))\n3369|        return found[0]\n3370|\n3371|    @property\n3372|    def n_inputs(self):\n3373|        \"\"\" The number of inputs of a model.\"\"\"\n3374|        return self._n_inputs\n3375|\n3376|    @n_inputs.setter\n3377|    def n_inputs(self, value):\n3378|        self._n_inputs = value\n3379|\n3380|    @property\n3381|    def n_outputs(self):\n3382|        \"\"\" The number of outputs of a model.\"\"\"\n3383|        return self._n_outputs\n3384|\n3385|    @n_outputs.setter\n3386|    def n_outputs(self, value):\n3387|        self._n_outputs = value\n3388|\n3389|    @property\n3390|    def eqcons(self):\n3391|        return self._eqcons\n3392|\n3393|    @eqcons.setter\n3394|    def eqcons(self, value):\n3395|        self._eqcons = value\n3396|\n3397|    @property\n3398|    def ineqcons(self):\n3399|        return self._eqcons\n3400|\n3401|    @ineqcons.setter\n3402|    def ineqcons(self, value):\n3403|        self._eqcons = value\n3404|\n3405|    def traverse_postorder(self, include_operator=False):\n3406|        \"\"\" Postorder traversal of the CompoundModel tree.\"\"\"\n3407|        res = []\n3408|        if isinstance(self.left, CompoundModel):\n3409|            res = res + self.left.traverse_postorder(include_operator)\n3410|        else:\n3411|            res = res + [self.left]\n3412|        if isinstance(self.right, CompoundModel):\n3413|            res = res + self.right.traverse_postorder(include_operator)\n3414|        else:\n3415|            res = res + [self.right]\n3416|        if include_operator:\n3417|            res.append(self.op)\n3418|        else:\n3419|            res.append(self)\n3420|        return res\n3421|\n3422|    def _format_expression(self, format_leaf=None):\n3423|        leaf_idx = 0\n3424|        operands = deque()\n3425|\n3426|        if format_leaf is None:\n3427|            format_leaf = lambda i, l: f'[{i}]'\n3428|\n3429|        for node in self.traverse_postorder():\n3430|            if not isinstance(node, CompoundModel):\n3431|                operands.append(format_leaf(leaf_idx, node))\n3432|                leaf_idx += 1\n3433|                continue\n3434|\n3435|            right = operands.pop()\n3436|            left = operands.pop()\n3437|            if node.op in OPERATOR_PRECEDENCE:\n3438|                oper_order = OPERATOR_PRECEDENCE[node.op]\n3439|\n3440|                if isinstance(node, CompoundModel):\n3441|                    if (isinstance(node.left, CompoundModel) and\n3442|                            OPERATOR_PRECEDENCE[node.left.op] < oper_order):\n3443|                        left = f'({left})'\n3444|                    if (isinstance(node.right, CompoundModel) and\n3445|                            OPERATOR_PRECEDENCE[node.right.op] < oper_order):\n3446|                        right = f'({right})'\n3447|\n3448|                operands.append(' '.join((left, node.op, right)))\n3449|            else:\n3450|                left = f'(({left}),'\n3451|                right = f'({right}))'\n3452|                operands.append(' '.join((node.op[0], left, right)))\n3453|\n3454|        return ''.join(operands)\n3455|\n3456|    def _format_components(self):\n3457|        if self._parameters_ is None:\n3458|            self._map_parameters()\n3459|        return '\\n\\n'.join('[{0}]: {1!r}'.format(idx, m)\n3460|                           for idx, m in enumerate(self._leaflist))\n3461|\n3462|    def __str__(self):\n3463|        expression = self._format_expression()\n3464|        components = self._format_components()\n3465|        keywords = [\n3466|            ('Expression', expression),\n3467|            ('Components', '\\n' + indent(components))\n3468|        ]\n3469|        return super()._format_str(keywords=keywords)\n3470|\n3471|    def rename(self, name):\n3472|        self.name = name\n3473|        return self\n3474|\n3475|    @property\n3476|    def isleaf(self):\n3477|        return False\n3478|\n3479|    @property\n3480|    def inverse(self):\n3481|        if self.op == '|':\n3482|            return self.right.inverse | self.left.inverse\n3483|        elif self.op == '&':\n3484|            return self.left.inverse & self.right.inverse\n3485|        else:\n3486|            return NotImplemented\n3487|\n3488|    @property\n3489|    def fittable(self):\n3490|        \"\"\" Set the fittable attribute on a compound model.\"\"\"\n3491|        if self._fittable is None:\n3492|            if self._leaflist is None:\n3493|                self._map_parameters()\n3494|            self._fittable = all(m.fittable for m in self._leaflist)\n3495|        return self._fittable\n3496|\n3497|    __add__ = _model_oper('+')\n3498|    __sub__ = _model_oper('-')\n3499|    __mul__ = _model_oper('*')\n3500|    __truediv__ = _model_oper('/')\n3501|    __pow__ = _model_oper('**')\n3502|    __or__ = _model_oper('|')\n3503|    __and__ = _model_oper('&')\n3504|\n3505|    def _map_parameters(self):\n3506|        \"\"\"\n3507|        Map all the constituent model parameters to the compound object,\n3508|        renaming as necessary by appending a suffix number.\n3509|\n3510|        This can be an expensive operation, particularly for a complex\n3511|        expression tree.\n3512|\n3513|        All the corresponding parameter attributes are created that one\n3514|        expects for the Model class.\n3515|\n3516|        The parameter objects that the attributes point to are the same\n3517|        objects as in the constiutent models. Changes made to parameter\n3518|        values to either are seen by both.\n3519|\n3520|        Prior to calling this, none of the associated attributes will\n3521|        exist. This method must be called to make the model usable by\n3522|        fitting engines.\n3523|\n3524|        If oldnames=True, then parameters are named as in the original\n3525|        implementation of compound models.\n3526|        \"\"\"\n3527|        if self._parameters is not None:\n3528|            # do nothing\n3529|            return\n3530|        if self._leaflist is None:\n3531|            self._make_leaflist()\n3532|        self._parameters_ = {}\n3533|        param_map = {}\n3534|        self._param_names = []\n3535|        for lindex, leaf in enumerate(self._leaflist):\n3536|            if not isinstance(leaf, dict):\n3537|                for param_name in leaf.param_names:\n3538|                    param = getattr(leaf, param_name)\n3539|                    new_param_name = f\"{param_name}_{lindex}\"\n3540|                    self.__dict__[new_param_name] = param\n3541|                    self._parameters_[new_param_name] = param\n3542|                    self._param_names.append(new_param_name)\n3543|                    param_map[new_param_name] = (lindex, param_name)\n3544|        self._param_metrics = {}\n3545|        self._param_map = param_map\n3546|        self._param_map_inverse = dict((v, k) for k, v in param_map.items())\n3547|        self._initialize_slices()\n3548|        self._param_names = tuple(self._param_names)\n3549|\n3550|    def _initialize_slices(self):\n3551|        param_metrics = self._param_metrics\n3552|        total_size = 0\n3553|\n3554|        for name in self.param_names:\n3555|            param = getattr(self, name)\n3556|            value = param.value\n3557|            param_size = np.size(value)\n3558|            param_shape = np.shape(value)\n3559|            param_slice = slice(total_size, total_size + param_size)\n3560|            param_metrics[name] = {}\n3561|            param_metrics[name]['slice'] = param_slice\n3562|            param_metrics[name]['shape'] = param_shape\n3563|            param_metrics[name]['size'] = param_size\n3564|            total_size += param_size\n3565|        self._parameters = np.empty(total_size, dtype=np.float64)\n3566|\n3567|    @staticmethod\n3568|    def _recursive_lookup(branch, adict, key):\n3569|        if isinstance(branch, CompoundModel):\n3570|            return adict[key]\n3571|        return branch, key\n3572|\n3573|    def inputs_map(self):\n3574|        \"\"\"\n3575|        Map the names of the inputs to this ExpressionTree to the inputs to the leaf models.\n3576|        \"\"\"\n3577|        inputs_map = {}\n3578|        if not isinstance(self.op, str):  # If we don't have an operator the mapping is trivial\n3579|            return {inp: (self, inp) for inp in self.inputs}\n3580|\n3581|        elif self.op == '|':\n3582|            if isinstance(self.left, CompoundModel):\n3583|                l_inputs_map = self.left.inputs_map()\n3584|            for inp in self.inputs:\n3585|                if isinstance(self.left, CompoundModel):\n3586|                    inputs_map[inp] = l_inputs_map[inp]\n3587|                else:\n3588|                    inputs_map[inp] = self.left, inp\n3589|        elif self.op == '&':\n3590|            if isinstance(self.left, CompoundModel):\n3591|                l_inputs_map = self.left.inputs_map()\n3592|            if isinstance(self.right, CompoundModel):\n3593|                r_inputs_map = self.right.inputs_map()\n3594|            for i, inp in enumerate(self.inputs):\n3595|                if i < len(self.left.inputs):  # Get from left\n3596|                    if isinstance(self.left, CompoundModel):\n3597|                        inputs_map[inp] = l_inputs_map[self.left.inputs[i]]\n3598|                    else:\n3599|                        inputs_map[inp] = self.left, self.left.inputs[i]\n3600|                else:  # Get from right\n3601|                    if isinstance(self.right, CompoundModel):\n3602|                        inputs_map[inp] = r_inputs_map[self.right.inputs[i - len(self.left.inputs)]]\n3603|                    else:\n3604|                        inputs_map[inp] = self.right, self.right.inputs[i - len(self.left.inputs)]\n3605|        elif self.op == 'fix_inputs':\n3606|            fixed_ind = list(self.right.keys())\n3607|            ind = [list(self.left.inputs).index(i) if isinstance(i, str) else i for i in fixed_ind]\n3608|            inp_ind = list(range(self.left.n_inputs))\n3609|            for i in ind:\n3610|                inp_ind.remove(i)\n3611|            for i in inp_ind:\n3612|                inputs_map[self.left.inputs[i]] = self.left, self.left.inputs[i]\n3613|        else:\n3614|            if isinstance(self.left, CompoundModel):\n3615|                l_inputs_map = self.left.inputs_map()\n3616|            for inp in self.left.inputs:\n3617|                if isinstance(self.left, CompoundModel):\n3618|                    inputs_map[inp] = l_inputs_map[inp]\n3619|                else:\n3620|                    inputs_map[inp] = self.left, inp\n3621|        return inputs_map\n3622|\n3623|    def _parameter_units_for_data_units(self, input_units, output_units):\n3624|        if self._leaflist is None:\n3625|            self._map_parameters()\n3626|        units_for_data = {}\n3627|        for imodel, model in enumerate(self._leaflist):\n3628|            units_for_data_leaf = model._parameter_units_for_data_units(input_units, output_units)\n3629|            for param_leaf in units_for_data_leaf:\n3630|                param = self._param_map_inverse[(imodel, param_leaf)]\n3631|                units_for_data[param] = units_for_data_leaf[param_leaf]\n3632|        return units_for_data\n3633|\n3634|    @property\n3635|    def input_units(self):\n3636|        inputs_map = self.inputs_map()\n3637|        input_units_dict = {key: inputs_map[key][0].input_units[orig_key]\n3638|                            for key, (mod, orig_key) in inputs_map.items()\n3639|                            if inputs_map[key][0].input_units is not None}\n3640|        if input_units_dict:\n3641|            return input_units_dict\n3642|        return None\n3643|\n3644|    @property\n3645|    def input_units_equivalencies(self):\n3646|        inputs_map = self.inputs_map()\n3647|        input_units_equivalencies_dict = {\n3648|            key: inputs_map[key][0].input_units_equivalencies[orig_key]\n3649|            for key, (mod, orig_key) in inputs_map.items()\n3650|            if inputs_map[key][0].input_units_equivalencies is not None\n3651|        }\n3652|        if not input_units_equivalencies_dict:\n3653|            return None\n3654|\n3655|        return input_units_equivalencies_dict\n3656|\n3657|    @property\n3658|    def input_units_allow_dimensionless(self):\n3659|        inputs_map = self.inputs_map()\n3660|        return {key: inputs_map[key][0].input_units_allow_dimensionless[orig_key]\n3661|                for key, (mod, orig_key) in inputs_map.items()}\n3662|\n3663|    @property\n3664|    def input_units_strict(self):\n3665|        inputs_map = self.inputs_map()\n3666|        return {key: inputs_map[key][0].input_units_strict[orig_key]\n3667|                for key, (mod, orig_key) in inputs_map.items()}\n3668|\n3669|    @property\n3670|    def return_units(self):\n3671|        outputs_map = self.outputs_map()\n3672|        return {key: outputs_map[key][0].return_units[orig_key]\n3673|                for key, (mod, orig_key) in outputs_map.items()\n3674|                if outputs_map[key][0].return_units is not None}\n3675|\n3676|    def outputs_map(self):\n3677|        \"\"\"\n3678|        Map the names of the outputs to this ExpressionTree to the outputs to the leaf models.\n3679|        \"\"\"\n3680|        outputs_map = {}\n3681|        if not isinstance(self.op, str):  # If we don't have an operator the mapping is trivial\n3682|            return {out: (self, out) for out in self.outputs}\n3683|\n3684|        elif self.op == '|':\n3685|            if isinstance(self.right, CompoundModel):\n3686|                r_outputs_map = self.right.outputs_map()\n3687|            for out in self.outputs:\n3688|                if isinstance(self.right, CompoundModel):\n3689|                    outputs_map[out] = r_outputs_map[out]\n3690|                else:\n3691|                    outputs_map[out] = self.right, out\n3692|\n3693|        elif self.op == '&':\n3694|            if isinstance(self.left, CompoundModel):\n3695|                l_outputs_map = self.left.outputs_map()\n3696|            if isinstance(self.right, CompoundModel):\n3697|                r_outputs_map = self.right.outputs_map()\n3698|            for i, out in enumerate(self.outputs):\n3699|                if i < len(self.left.outputs):  # Get from left\n3700|                    if isinstance(self.left, CompoundModel):\n3701|                        outputs_map[out] = l_outputs_map[self.left.outputs[i]]\n3702|                    else:\n3703|                        outputs_map[out] = self.left, self.left.outputs[i]\n3704|                else:  # Get from right\n3705|                    if isinstance(self.right, CompoundModel):\n3706|                        outputs_map[out] = r_outputs_map[self.right.outputs[i - len(self.left.outputs)]]\n3707|                    else:\n3708|                        outputs_map[out] = self.right, self.right.outputs[i - len(self.left.outputs)]\n3709|        elif self.op == 'fix_inputs':\n3710|            return self.left.outputs_map()\n3711|        else:\n3712|            if isinstance(self.left, CompoundModel):\n3713|                l_outputs_map = self.left.outputs_map()\n3714|            for out in self.left.outputs:\n3715|                if isinstance(self.left, CompoundModel):\n3716|                    outputs_map[out] = l_outputs_map()[out]\n3717|                else:\n3718|                    outputs_map[out] = self.left, out\n3719|        return outputs_map\n3720|\n3721|    @property\n3722|    def has_user_bounding_box(self):\n3723|        \"\"\"\n3724|        A flag indicating whether or not a custom bounding_box has been\n3725|        assigned to this model by a user, via assignment to\n3726|        ``model.bounding_box``.\n3727|        \"\"\"\n3728|\n3729|        return self._user_bounding_box is not None\n3730|\n3731|    def render(self, out=None, coords=None):\n3732|        \"\"\"\n3733|        Evaluate a model at fixed positions, respecting the ``bounding_box``.\n3734|\n3735|        The key difference relative to evaluating the model directly is that\n3736|        this method is limited to a bounding box if the `Model.bounding_box`\n3737|        attribute is set.\n3738|\n3739|        Parameters\n3740|        ----------\n3741|        out : `numpy.ndarray`, optional\n3742|            An array that the evaluated model will be added to.  If this is not\n3743|            given (or given as ``None``), a new array will be created.\n3744|        coords : array-like, optional\n3745|            An array to be used to translate from the model's input coordinates\n3746|            to the ``out`` array. It should have the property that\n3747|            ``self(coords)`` yields the same shape as ``out``.  If ``out`` is\n3748|            not specified, ``coords`` will be used to determine the shape of\n3749|            the returned array. If this is not provided (or None), the model\n3750|            will be evaluated on a grid determined by `Model.bounding_box`.\n3751|\n3752|        Returns\n3753|        -------\n3754|        out : `numpy.ndarray`\n3755|            The model added to ``out`` if  ``out`` is not ``None``, or else a\n3756|            new array from evaluating the model over ``coords``.\n3757|            If ``out`` and ``coords`` are both `None`, the returned array is\n3758|            limited to the `Model.bounding_box` limits. If\n3759|            `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be\n3760|            passed.\n3761|\n3762|        Raises\n3763|        ------\n3764|        ValueError\n3765|            If ``coords`` are not given and the the `Model.bounding_box` of\n3766|            this model is not set.\n3767|\n3768|        Examples\n3769|        --------\n3770|        :ref:`astropy:bounding-boxes`\n3771|        \"\"\"\n3772|\n3773|        bbox = self.get_bounding_box()\n3774|\n3775|        ndim = self.n_inputs\n3776|\n3777|        if (coords is None) and (out is None) and (bbox is None):\n3778|            raise ValueError('If no bounding_box is set, '\n3779|                             'coords or out must be input.')\n3780|\n3781|        # for consistent indexing\n3782|        if ndim == 1:\n3783|            if coords is not None:\n3784|                coords = [coords]\n3785|            if bbox is not None:\n3786|                bbox = [bbox]\n3787|\n3788|        if coords is not None:\n3789|            coords = np.asanyarray(coords, dtype=float)\n3790|            # Check dimensions match out and model\n3791|            assert len(coords) == ndim\n3792|            if out is not None:\n3793|                if coords[0].shape != out.shape:\n3794|                    raise ValueError('inconsistent shape of the output.')\n3795|            else:\n3796|                out = np.zeros(coords[0].shape)\n3797|\n3798|        if out is not None:\n3799|            out = np.asanyarray(out)\n3800|            if out.ndim != ndim:\n3801|                raise ValueError('the array and model must have the same '\n3802|                                 'number of dimensions.')\n3803|\n3804|        if bbox is not None:\n3805|            # Assures position is at center pixel, important when using\n3806|            # add_array.\n3807|            pd = np.array([(np.mean(bb), np.ceil((bb[1] - bb[0]) / 2))\n3808|                           for bb in bbox]).astype(int).T\n3809|            pos, delta = pd\n3810|\n3811|            if coords is not None:\n3812|                sub_shape = tuple(delta * 2 + 1)\n3813|                sub_coords = np.array([extract_array(c, sub_shape, pos)\n3814|                                       for c in coords])\n3815|            else:\n3816|                limits = [slice(p - d, p + d + 1, 1) for p, d in pd.T]\n3817|                sub_coords = np.mgrid[limits]\n3818|\n3819|            sub_coords = sub_coords[::-1]\n3820|\n3821|            if out is None:\n3822|                out = self(*sub_coords)\n3823|            else:\n3824|                try:\n3825|                    out = add_array(out, self(*sub_coords), pos)\n3826|                except ValueError:\n3827|                    raise ValueError(\n3828|                        'The `bounding_box` is larger than the input out in '\n3829|                        'one or more dimensions. Set '\n3830|                        '`model.bounding_box = None`.')\n3831|        else:\n3832|            if coords is None:\n3833|                im_shape = out.shape\n3834|                limits = [slice(i) for i in im_shape]\n3835|                coords = np.mgrid[limits]\n3836|\n3837|            coords = coords[::-1]\n3838|\n3839|            out += self(*coords)\n3840|\n3841|        return out\n3842|\n3843|    def replace_submodel(self, name, model):\n3844|        \"\"\"\n3845|        Construct a new `~astropy.modeling.CompoundModel` instance from an\n3846|        existing CompoundModel, replacing the named submodel with a new model.\n3847|\n3848|        In order to ensure that inverses and names are kept/reconstructed, it's\n3849|        necessary to rebuild the CompoundModel from the replaced node all the\n3850|        way back to the base. The original CompoundModel is left untouched.\n3851|\n3852|        Parameters\n3853|        ----------\n3854|        name : str\n3855|            name of submodel to be replaced\n3856|        model : `~astropy.modeling.Model`\n3857|            replacement model\n3858|        \"\"\"\n3859|        submodels = [m for m in self.traverse_postorder()\n3860|                     if getattr(m, 'name', None) == name]\n3861|        if submodels:\n3862|            if len(submodels) > 1:\n3863|                raise ValueError(f\"More than one submodel named {name}\")\n3864|\n3865|            old_model = submodels.pop()\n3866|            if len(old_model) != len(model):\n3867|                raise ValueError(\"New and old models must have equal values \"\n3868|                                 \"for n_models\")\n3869|\n3870|            # Do this check first in order to raise a more helpful Exception,\n3871|            # although it would fail trying to construct the new CompoundModel\n3872|            if (old_model.n_inputs != model.n_inputs or\n3873|                        old_model.n_outputs != model.n_outputs):\n3874|                raise ValueError(\"New model must match numbers of inputs and \"\n3875|                                 \"outputs of existing model\")\n3876|\n3877|            tree = _get_submodel_path(self, name)\n3878|            while tree:\n3879|                branch = self.copy()\n3880|                for node in tree[:-1]:\n3881|                    branch = getattr(branch, node)\n3882|                setattr(branch, tree[-1], model)\n3883|                model = CompoundModel(branch.op, branch.left, branch.right,\n3884|                                      name=branch.name)\n3885|                tree = tree[:-1]\n3886|            return model\n3887|\n3888|        else:\n3889|            raise ValueError(f\"No submodels found named {name}\")\n3890|\n3891|    def _set_sub_models_and_parameter_units(self, left, right):\n3892|        \"\"\"\n3893|        Provides a work-around to properly set the sub models and respective\n3894|        parameters's units/values when using ``without_units_for_data``\n3895|        or ``without_units_for_data`` methods.\n3896|        \"\"\"\n3897|        model = CompoundModel(self.op, left, right)\n3898|\n3899|        self.left = left\n3900|        self.right = right\n3901|\n3902|        for name in model.param_names:\n3903|            model_parameter = getattr(model, name)\n3904|            parameter = getattr(self, name)\n3905|\n3906|            parameter.value = model_parameter.value\n3907|            parameter._set_unit(model_parameter.unit, force=True)\n3908|\n3909|    def without_units_for_data(self, **kwargs):\n3910|        \"\"\"\n3911|        See `~astropy.modeling.Model.without_units_for_data` for overview\n3912|        of this method.\n3913|\n3914|        Notes\n3915|        -----\n3916|        This modifies the behavior of the base method to account for the\n3917|        case where the sub-models of a compound model have different output\n3918|        units. This is only valid for compound * and / compound models as\n3919|        in that case it is reasonable to mix the output units. It does this\n3920|        by modifying the output units of each sub model by using the output\n3921|        units of the other sub model so that we can apply the original function\n3922|        and get the desired result.\n3923|\n3924|        Additional data has to be output in the mixed output unit case\n3925|        so that the units can be properly rebuilt by\n3926|        `~astropy.modeling.CompoundModel.with_units_from_data`.\n3927|\n3928|        Outside the mixed output units, this method is identical to the\n3929|        base method.\n3930|        \"\"\"\n3931|        if self.op in ['*', '/']:\n3932|            model = self.copy()\n3933|            inputs = {inp: kwargs[inp] for inp in self.inputs}\n3934|\n3935|            left_units = self.left.output_units(**kwargs)\n3936|            right_units = self.right.output_units(**kwargs)\n3937|\n3938|            if self.op == '*':\n3939|                left_kwargs = {out: kwargs[out] / right_units[out]\n3940|                               for out in self.left.outputs if kwargs[out] is not None}\n3941|                right_kwargs = {out: kwargs[out] / left_units[out]\n3942|                                for out in self.right.outputs if kwargs[out] is not None}\n3943|            else:\n3944|                left_kwargs = {out: kwargs[out] * right_units[out]\n3945|                               for out in self.left.outputs if kwargs[out] is not None}\n3946|                right_kwargs = {out: 1 / kwargs[out] * left_units[out]\n3947|                                for out in self.right.outputs if kwargs[out] is not None}\n3948|\n3949|            left_kwargs.update(inputs.copy())\n3950|            right_kwargs.update(inputs.copy())\n3951|\n3952|            left = self.left.without_units_for_data(**left_kwargs)\n3953|            if isinstance(left, tuple):\n3954|                left_kwargs['_left_kwargs'] = left[1]\n3955|                left_kwargs['_right_kwargs'] = left[2]\n3956|                left = left[0]\n3957|\n3958|            right = self.right.without_units_for_data(**right_kwargs)\n3959|            if isinstance(right, tuple):\n3960|                right_kwargs['_left_kwargs'] = right[1]\n3961|                right_kwargs['_right_kwargs'] = right[2]\n3962|                right = right[0]\n3963|\n3964|            model._set_sub_models_and_parameter_units(left, right)\n3965|\n3966|            return model, left_kwargs, right_kwargs\n3967|        else:\n3968|            return super().without_units_for_data(**kwargs)\n3969|\n3970|    def with_units_from_data(self, **kwargs):\n3971|        \"\"\"\n3972|        See `~astropy.modeling.Model.with_units_from_data` for overview\n3973|        of this method.\n3974|\n3975|        Notes\n3976|        -----\n3977|        This modifies the behavior of the base method to account for the\n3978|        case where the sub-models of a compound model have different output\n3979|        units. This is only valid for compound * and / compound models as\n3980|        in that case it is reasonable to mix the output units. In order to\n3981|        do this it requires some additional information output by\n3982|        `~astropy.modeling.CompoundModel.without_units_for_data` passed as\n3983|        keyword arguments under the keywords ``_left_kwargs`` and ``_right_kwargs``.\n3984|\n3985|        Outside the mixed output units, this method is identical to the\n3986|        base method.\n3987|        \"\"\"\n3988|\n3989|        if self.op in ['*', '/']:\n3990|            left_kwargs = kwargs.pop('_left_kwargs')\n3991|            right_kwargs = kwargs.pop('_right_kwargs')\n3992|\n3993|            left = self.left.with_units_from_data(**left_kwargs)\n3994|            right = self.right.with_units_from_data(**right_kwargs)\n3995|\n3996|            model = self.copy()\n3997|            model._set_sub_models_and_parameter_units(left, right)\n3998|\n3999|            return model\n4000|        else:\n4001|            return super().with_units_from_data(**kwargs)\n4002|\n4003|\n4004|def _get_submodel_path(model, name):\n4005|    \"\"\"Find the route down a CompoundModel's tree to the model with the\n4006|    specified name (whether it's a leaf or not)\"\"\"\n4007|    if getattr(model, 'name', None) == name:\n4008|        return []\n4009|    try:\n4010|        return ['left'] + _get_submodel_path(model.left, name)\n4011|    except (AttributeError, TypeError):\n...\n\n\n\n\n---\n\n### Instructions ###\nFor each file, return the **exact line numbers, class names, or function names** where changes or tests should be added. Only return necessary items.\n\n**Format your output exactly like this:**\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nfunction: my_function\n\nfull_path2/file2.py\nline: 24\nfunction: MyClass2.my_method\n\nWrap the entire response in triple backticks and include no explanations.\n", "response": ["```\nastropy/modeling/separable.py\nfunction: _cstack\nfunction: _coord_matrix\n```"], "usage": {"completion_tokens": 0, "prompt_tokens": 0}}}
